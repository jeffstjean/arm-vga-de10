
main.axf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__cs3_interrupt_vector>:
       0:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
      10:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
      20:	c4 09 00 00 c8 09 00 00 cc 09 00 00 d0 09 00 00     ................
      30:	d4 09 00 00 2c 15 00 00 d0 0a 00 00 d8 09 00 00     ....,...........

00000040 <__cs3_reset_generic>:
      40:	ea000026 	b	e0 <__cs3_start_asm_sim>

00000044 <__cs3_start_c>:
      44:	e59f608c 	ldr	r6, [pc, #140]	; d8 <__cs3_start_c+0x94>
      48:	e3560000 	cmp	r6, #0
      4c:	e92d4080 	push	{r7, lr}
      50:	e2466001 	sub	r6, r6, #1
      54:	0a00001e 	beq	d4 <__cs3_start_c+0x90>
      58:	e59f507c 	ldr	r5, [pc, #124]	; dc <__cs3_start_c+0x98>
      5c:	e3a00000 	mov	r0, #0
      60:	e3a01000 	mov	r1, #0
      64:	e515200c 	ldr	r2, [r5, #-12]
      68:	e515e010 	ldr	lr, [r5, #-16]
      6c:	e5154008 	ldr	r4, [r5, #-8]
      70:	e15e0002 	cmp	lr, r2
      74:	00822004 	addeq	r2, r2, r4
      78:	0a000009 	beq	a4 <__cs3_start_c+0x60>
      7c:	e3540000 	cmp	r4, #0
      80:	0a000007 	beq	a4 <__cs3_start_c+0x60>
      84:	e1a07002 	mov	r7, r2
      88:	e1a0c002 	mov	ip, r2
      8c:	e8be000c 	ldm	lr!, {r2, r3}
      90:	e8ac000c 	stmia	ip!, {r2, r3}
      94:	e067300c 	rsb	r3, r7, ip
      98:	e1540003 	cmp	r4, r3
      9c:	e1a0200c 	mov	r2, ip
      a0:	1afffff9 	bne	8c <__cs3_start_c+0x48>
      a4:	e515e004 	ldr	lr, [r5, #-4]
      a8:	e35e0000 	cmp	lr, #0
      ac:	11a03002 	movne	r3, r2
      b0:	0a000003 	beq	c4 <__cs3_start_c+0x80>
      b4:	e8a30003 	stmia	r3!, {r0, r1}
      b8:	e062c003 	rsb	ip, r2, r3
      bc:	e15e000c 	cmp	lr, ip
      c0:	1afffffb 	bne	b4 <__cs3_start_c+0x70>
      c4:	e2466001 	sub	r6, r6, #1
      c8:	e3760001 	cmn	r6, #1
      cc:	e2855014 	add	r5, r5, #20
      d0:	1affffe3 	bne	64 <__cs3_start_c+0x20>
      d4:	eb0004fb 	bl	14c8 <__cs3_premain>
      d8:	00000001 	.word	0x00000001
      dc:	00001678 	.word	0x00001678

000000e0 <__cs3_start_asm_sim>:
      e0:	e28f103c 	add	r1, pc, #60	; 0x3c
      e4:	e3a00016 	mov	r0, #22
      e8:	ef123456 	svc	0x00123456
      ec:	e3500000 	cmp	r0, #0
      f0:	ba000008 	blt	118 <__cs3_start_asm_sim+0x38>
      f4:	e59f2028 	ldr	r2, [pc, #40]	; 124 <__cs3_heap_start_ptr>
      f8:	e59fd01c 	ldr	sp, [pc, #28]	; 11c <__cs3_start_asm_sim+0x3c>
      fc:	e5920008 	ldr	r0, [r2, #8]
     100:	e3500000 	cmp	r0, #0
     104:	11a0d000 	movne	sp, r0
     108:	e59f1010 	ldr	r1, [pc, #16]	; 120 <__cs3_start_asm_sim+0x40>
     10c:	e5920004 	ldr	r0, [r2, #4]
     110:	e3500000 	cmp	r0, #0
     114:	15810000 	strne	r0, [r1]
     118:	eaffffc9 	b	44 <__cs3_start_c>
     11c:	3ffffff8 	.word	0x3ffffff8
     120:	00001ab0 	.word	0x00001ab0

00000124 <__cs3_heap_start_ptr>:
     124:	00001de8 	.word	0x00001de8

00000128 <_start>:
     128:	e51fd000 	ldr	sp, [pc, #-0]	; 130 <_start+0x8>
     12c:	eaffffc4 	b	44 <__cs3_start_c>
     130:	3ffffff8 	.word	0x3ffffff8

00000134 <deregister_tm_clones>:
     134:	e92d4008 	push	{r3, lr}
     138:	e59f002c 	ldr	r0, [pc, #44]	; 16c <deregister_tm_clones+0x38>
     13c:	e59f302c 	ldr	r3, [pc, #44]	; 170 <deregister_tm_clones+0x3c>
     140:	e0603003 	rsb	r3, r0, r3
     144:	e3530006 	cmp	r3, #6
     148:	8a000001 	bhi	154 <deregister_tm_clones+0x20>
     14c:	e8bd4008 	pop	{r3, lr}
     150:	e12fff1e 	bx	lr
     154:	e59f3018 	ldr	r3, [pc, #24]	; 174 <deregister_tm_clones+0x40>
     158:	e3530000 	cmp	r3, #0
     15c:	0afffffa 	beq	14c <deregister_tm_clones+0x18>
     160:	e1a0e00f 	mov	lr, pc
     164:	e12fff13 	bx	r3
     168:	eafffff7 	b	14c <deregister_tm_clones+0x18>
     16c:	00001ab8 	.word	0x00001ab8
     170:	00001abb 	.word	0x00001abb
     174:	00000000 	.word	0x00000000

00000178 <register_tm_clones>:
     178:	e92d4008 	push	{r3, lr}
     17c:	e59f0034 	ldr	r0, [pc, #52]	; 1b8 <register_tm_clones+0x40>
     180:	e59f3034 	ldr	r3, [pc, #52]	; 1bc <register_tm_clones+0x44>
     184:	e0603003 	rsb	r3, r0, r3
     188:	e1a03143 	asr	r3, r3, #2
     18c:	e0833fa3 	add	r3, r3, r3, lsr #31
     190:	e1b010c3 	asrs	r1, r3, #1
     194:	1a000001 	bne	1a0 <register_tm_clones+0x28>
     198:	e8bd4008 	pop	{r3, lr}
     19c:	e12fff1e 	bx	lr
     1a0:	e59f2018 	ldr	r2, [pc, #24]	; 1c0 <register_tm_clones+0x48>
     1a4:	e3520000 	cmp	r2, #0
     1a8:	0afffffa 	beq	198 <register_tm_clones+0x20>
     1ac:	e1a0e00f 	mov	lr, pc
     1b0:	e12fff12 	bx	r2
     1b4:	eafffff7 	b	198 <register_tm_clones+0x20>
     1b8:	00001ab8 	.word	0x00001ab8
     1bc:	00001ab8 	.word	0x00001ab8
     1c0:	00000000 	.word	0x00000000

000001c4 <__do_global_dtors_aux>:
     1c4:	e92d4010 	push	{r4, lr}
     1c8:	e59f402c 	ldr	r4, [pc, #44]	; 1fc <__do_global_dtors_aux+0x38>
     1cc:	e5d43000 	ldrb	r3, [r4]
     1d0:	e3530000 	cmp	r3, #0
     1d4:	1a000006 	bne	1f4 <__do_global_dtors_aux+0x30>
     1d8:	ebffffd5 	bl	134 <deregister_tm_clones>
     1dc:	e59f301c 	ldr	r3, [pc, #28]	; 200 <__do_global_dtors_aux+0x3c>
     1e0:	e3530000 	cmp	r3, #0
     1e4:	159f0018 	ldrne	r0, [pc, #24]	; 204 <__do_global_dtors_aux+0x40>
     1e8:	1320f000 	nopne	{0}
     1ec:	e3a03001 	mov	r3, #1
     1f0:	e5c43000 	strb	r3, [r4]
     1f4:	e8bd4010 	pop	{r4, lr}
     1f8:	e12fff1e 	bx	lr
     1fc:	00001ab8 	.word	0x00001ab8
     200:	00000000 	.word	0x00000000
     204:	000015b8 	.word	0x000015b8

00000208 <frame_dummy>:
     208:	e92d4008 	push	{r3, lr}
     20c:	e59f3034 	ldr	r3, [pc, #52]	; 248 <frame_dummy+0x40>
     210:	e3530000 	cmp	r3, #0
     214:	159f0030 	ldrne	r0, [pc, #48]	; 24c <frame_dummy+0x44>
     218:	159f1030 	ldrne	r1, [pc, #48]	; 250 <frame_dummy+0x48>
     21c:	1320f000 	nopne	{0}
     220:	e59f002c 	ldr	r0, [pc, #44]	; 254 <frame_dummy+0x4c>
     224:	e5903000 	ldr	r3, [r0]
     228:	e3530000 	cmp	r3, #0
     22c:	0a000003 	beq	240 <frame_dummy+0x38>
     230:	e59f3020 	ldr	r3, [pc, #32]	; 258 <frame_dummy+0x50>
     234:	e3530000 	cmp	r3, #0
     238:	11a0e00f 	movne	lr, pc
     23c:	112fff13 	bxne	r3
     240:	e8bd4008 	pop	{r3, lr}
     244:	eaffffcb 	b	178 <register_tm_clones>
     248:	00000000 	.word	0x00000000
     24c:	000015b8 	.word	0x000015b8
     250:	00001abc 	.word	0x00001abc
     254:	00001678 	.word	0x00001678
     258:	00000000 	.word	0x00000000

0000025c <map>:
    for(i = 0; i < VGA_WIDTH_BINS*VGA_HEIGHT_BINS; i++) {
        colour_buffer[i] = colours[i%7];
    }
}

int map(int value, int from_low, int from_high, int to_low, int to_high) {
     25c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
     260:	e1a05001 	mov	r5, r1
     264:	e1a08002 	mov	r8, r2
     268:	e1a04003 	mov	r4, r3
    float slope = (float)(to_high - to_low)/(float)(from_high - from_low);
    return to_low + (int)(slope*(value - from_low));
     26c:	e0610000 	rsb	r0, r1, r0
     270:	eb0002bd 	bl	d6c <__aeabi_i2f>
     274:	e1a06000 	mov	r6, r0
        colour_buffer[i] = colours[i%7];
    }
}

int map(int value, int from_low, int from_high, int to_low, int to_high) {
    float slope = (float)(to_high - to_low)/(float)(from_high - from_low);
     278:	e59d0018 	ldr	r0, [sp, #24]
     27c:	e0640000 	rsb	r0, r4, r0
     280:	eb0002b9 	bl	d6c <__aeabi_i2f>
     284:	e1a07000 	mov	r7, r0
     288:	e0650008 	rsb	r0, r5, r8
     28c:	eb0002b6 	bl	d6c <__aeabi_i2f>
     290:	e1a01000 	mov	r1, r0
     294:	e1a00007 	mov	r0, r7
     298:	eb000350 	bl	fe0 <__aeabi_fdiv>
     29c:	e1a01000 	mov	r1, r0
    return to_low + (int)(slope*(value - from_low));
     2a0:	e1a00006 	mov	r0, r6
     2a4:	eb0002e7 	bl	e48 <__aeabi_fmul>
     2a8:	eb0003a4 	bl	1140 <__aeabi_f2iz>
}
     2ac:	e0800004 	add	r0, r0, r4
     2b0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

000002b4 <vga_pixel_to_short>:

short vga_pixel_to_short(colour_t colour) {
     2b4:	e92d4070 	push	{r4, r5, r6, lr}
     2b8:	e24dd018 	sub	sp, sp, #24
     2bc:	e28d3018 	add	r3, sp, #24
     2c0:	e9030007 	stmdb	r3, {r0, r1, r2}
    short result = 0;
    result |= map(colour.blue, 0, 255, 0, 31) & 0x1F;
     2c4:	e3a0401f 	mov	r4, #31
     2c8:	e58d4000 	str	r4, [sp]
     2cc:	e59d0014 	ldr	r0, [sp, #20]
     2d0:	e3a01000 	mov	r1, #0
     2d4:	e3a020ff 	mov	r2, #255	; 0xff
     2d8:	e1a03001 	mov	r3, r1
     2dc:	ebffffde 	bl	25c <map>
     2e0:	e1a06000 	mov	r6, r0
    result |= (map(colour.green, 0, 255, 0, 63) & 0x3F) << 5;
     2e4:	e3a0303f 	mov	r3, #63	; 0x3f
     2e8:	e58d3000 	str	r3, [sp]
     2ec:	e59d0010 	ldr	r0, [sp, #16]
     2f0:	e3a01000 	mov	r1, #0
     2f4:	e3a020ff 	mov	r2, #255	; 0xff
     2f8:	e1a03001 	mov	r3, r1
     2fc:	ebffffd6 	bl	25c <map>
     300:	e1a05000 	mov	r5, r0
    result |= (map(colour.red, 0, 255, 0, 31) & 0x1F) << 11;
     304:	e58d4000 	str	r4, [sp]
     308:	e59d000c 	ldr	r0, [sp, #12]
     30c:	e3a01000 	mov	r1, #0
     310:	e3a020ff 	mov	r2, #255	; 0xff
     314:	e1a03001 	mov	r3, r1
     318:	ebffffcf 	bl	25c <map>
    return to_low + (int)(slope*(value - from_low));
}

short vga_pixel_to_short(colour_t colour) {
    short result = 0;
    result |= map(colour.blue, 0, 255, 0, 31) & 0x1F;
     31c:	e0066004 	and	r6, r6, r4
    result |= (map(colour.green, 0, 255, 0, 63) & 0x3F) << 5;
     320:	e1860580 	orr	r0, r6, r0, lsl #11
     324:	e6ff6070 	uxth	r6, r0
     328:	e205503f 	and	r5, r5, #63	; 0x3f
    result |= (map(colour.red, 0, 255, 0, 31) & 0x1F) << 11;
     32c:	e1860285 	orr	r0, r6, r5, lsl #5
    return result;
}
     330:	e6bf0070 	sxth	r0, r0
     334:	e28dd018 	add	sp, sp, #24
     338:	e8bd8070 	pop	{r4, r5, r6, pc}

0000033c <vga_set_pixel>:


void vga_set_pixel(int x, int y, colour_t colour) {
     33c:	e24dd008 	sub	sp, sp, #8
     340:	e24dc004 	sub	ip, sp, #4
     344:	e98c000c 	stmib	ip, {r2, r3}
    volatile short *address=(volatile short*)(FPGA_PIXEL_BUF_BASE + (y << 10) + (x << 1));
     348:	e1a00080 	lsl	r0, r0, #1
     34c:	e2800332 	add	r0, r0, #-939524096	; 0xc8000000
     350:	e1a01501 	lsl	r1, r1, #10
    *address = (colour.blue & 0x1F) | (colour.green & 0x3F) << 5 | (colour.red & 0x1F) << 11;
     354:	e59d2008 	ldr	r2, [sp, #8]
     358:	e202201f 	and	r2, r2, #31
     35c:	e59d3000 	ldr	r3, [sp]
     360:	e1822583 	orr	r2, r2, r3, lsl #11
     364:	e59d3004 	ldr	r3, [sp, #4]
     368:	e203303f 	and	r3, r3, #63	; 0x3f
     36c:	e1823283 	orr	r3, r2, r3, lsl #5
     370:	e6ff3073 	uxth	r3, r3
     374:	e18030b1 	strh	r3, [r0, r1]
}
     378:	e28dd008 	add	sp, sp, #8
     37c:	e12fff1e 	bx	lr

00000380 <vga_set_screen>:

void vga_set_screen(colour_t colour) {
     380:	e92d4070 	push	{r4, r5, r6, lr}
     384:	e24dd018 	sub	sp, sp, #24
     388:	e28d3018 	add	r3, sp, #24
     38c:	e9030007 	stmdb	r3, {r0, r1, r2}
    int i, j;
    for(i = 0; i < VGA_WIDTH; i++) {
     390:	e3a05000 	mov	r5, #0
void vga_set_pixel(int x, int y, colour_t colour) {
    volatile short *address=(volatile short*)(FPGA_PIXEL_BUF_BASE + (y << 10) + (x << 1));
    *address = (colour.blue & 0x1F) | (colour.green & 0x3F) << 5 | (colour.red & 0x1F) << 11;
}

void vga_set_screen(colour_t colour) {
     394:	e1a06005 	mov	r6, r5
     398:	ea00000c 	b	3d0 <vga_set_screen+0x50>
    int i, j;
    for(i = 0; i < VGA_WIDTH; i++) {
        for(j = 0; j < VGA_HEIGHT; j++) {
            vga_set_pixel(i, j, colour);
     39c:	e59d3014 	ldr	r3, [sp, #20]
     3a0:	e58d3000 	str	r3, [sp]
     3a4:	e28d300c 	add	r3, sp, #12
     3a8:	e893000c 	ldm	r3, {r2, r3}
     3ac:	e1a00005 	mov	r0, r5
     3b0:	e1a01004 	mov	r1, r4
     3b4:	ebffffe0 	bl	33c <vga_set_pixel>
}

void vga_set_screen(colour_t colour) {
    int i, j;
    for(i = 0; i < VGA_WIDTH; i++) {
        for(j = 0; j < VGA_HEIGHT; j++) {
     3b8:	e2844001 	add	r4, r4, #1
     3bc:	e35400f0 	cmp	r4, #240	; 0xf0
     3c0:	1afffff5 	bne	39c <vga_set_screen+0x1c>
    *address = (colour.blue & 0x1F) | (colour.green & 0x3F) << 5 | (colour.red & 0x1F) << 11;
}

void vga_set_screen(colour_t colour) {
    int i, j;
    for(i = 0; i < VGA_WIDTH; i++) {
     3c4:	e2855001 	add	r5, r5, #1
     3c8:	e3550d05 	cmp	r5, #320	; 0x140
     3cc:	0a000001 	beq	3d8 <vga_set_screen+0x58>
void vga_set_pixel(int x, int y, colour_t colour) {
    volatile short *address=(volatile short*)(FPGA_PIXEL_BUF_BASE + (y << 10) + (x << 1));
    *address = (colour.blue & 0x1F) | (colour.green & 0x3F) << 5 | (colour.red & 0x1F) << 11;
}

void vga_set_screen(colour_t colour) {
     3d0:	e1a04006 	mov	r4, r6
     3d4:	eafffff0 	b	39c <vga_set_screen+0x1c>
    for(i = 0; i < VGA_WIDTH; i++) {
        for(j = 0; j < VGA_HEIGHT; j++) {
            vga_set_pixel(i, j, colour);
        }
    }
}
     3d8:	e28dd018 	add	sp, sp, #24
     3dc:	e8bd8070 	pop	{r4, r5, r6, pc}

000003e0 <vga_init>:

void vga_set_screen(colour_t colour);
void vga_set_current_segment(colour_t colour);
void vga_draw_current_segment();

void vga_init() {
     3e0:	e92d4070 	push	{r4, r5, r6, lr}
     3e4:	e24dd058 	sub	sp, sp, #88	; 0x58
    vga_set_screen(BLACK);
     3e8:	e30145bc 	movw	r4, #5564	; 0x15bc
     3ec:	e3404000 	movt	r4, #0
     3f0:	e8940007 	ldm	r4, {r0, r1, r2}
     3f4:	ebffffe1 	bl	380 <vga_set_screen>
    const colour_t colours[] = { RED, BLUE, PURPLE, TURQUOISE, ORANGE, WHITE, YELLOW };
     3f8:	e3a0201f 	mov	r2, #31
     3fc:	e58d2004 	str	r2, [sp, #4]
     400:	e3a03000 	mov	r3, #0
     404:	e58d3008 	str	r3, [sp, #8]
     408:	e58d300c 	str	r3, [sp, #12]
     40c:	e58d3010 	str	r3, [sp, #16]
     410:	e58d3014 	str	r3, [sp, #20]
     414:	e58d2018 	str	r2, [sp, #24]
     418:	e28dc01c 	add	ip, sp, #28
     41c:	e284200c 	add	r2, r4, #12
     420:	e8920007 	ldm	r2, {r0, r1, r2}
     424:	e88c0007 	stm	ip, {r0, r1, r2}
     428:	e28dc028 	add	ip, sp, #40	; 0x28
     42c:	e2842018 	add	r2, r4, #24
     430:	e8920007 	ldm	r2, {r0, r1, r2}
     434:	e88c0007 	stm	ip, {r0, r1, r2}
     438:	e28dc034 	add	ip, sp, #52	; 0x34
     43c:	e2842024 	add	r2, r4, #36	; 0x24
     440:	e8920007 	ldm	r2, {r0, r1, r2}
     444:	e88c0007 	stm	ip, {r0, r1, r2}
     448:	e28dc040 	add	ip, sp, #64	; 0x40
     44c:	e2842030 	add	r2, r4, #48	; 0x30
     450:	e8920007 	ldm	r2, {r0, r1, r2}
     454:	e88c0007 	stm	ip, {r0, r1, r2}
     458:	e284403c 	add	r4, r4, #60	; 0x3c
     45c:	e8940007 	ldm	r4, {r0, r1, r2}
     460:	e28dc058 	add	ip, sp, #88	; 0x58
     464:	e90c0007 	stmdb	ip, {r0, r1, r2}
     468:	e1a04003 	mov	r4, r3
    int i;
    for(i = 0; i < VGA_WIDTH_BINS*VGA_HEIGHT_BINS; i++) {
        colour_buffer[i] = colours[i%7];
     46c:	e3015ad4 	movw	r5, #6868	; 0x1ad4
     470:	e3405000 	movt	r5, #0
     474:	e3026493 	movw	r6, #9363	; 0x2493
     478:	e3496249 	movt	r6, #37449	; 0x9249
     47c:	e0c21396 	smull	r1, r2, r6, r3
     480:	e0822003 	add	r2, r2, r3
     484:	e1a01fc3 	asr	r1, r3, #31
     488:	e0612142 	rsb	r2, r1, r2, asr #2
     48c:	e0622182 	rsb	r2, r2, r2, lsl #3
     490:	e0622003 	rsb	r2, r2, r3
     494:	e0822082 	add	r2, r2, r2, lsl #1
     498:	e28dc058 	add	ip, sp, #88	; 0x58
     49c:	e08c2102 	add	r2, ip, r2, lsl #2
     4a0:	e2422054 	sub	r2, r2, #84	; 0x54
     4a4:	e085c004 	add	ip, r5, r4
     4a8:	e8920007 	ldm	r2, {r0, r1, r2}
     4ac:	e88c0007 	stm	ip, {r0, r1, r2}

void vga_init() {
    vga_set_screen(BLACK);
    const colour_t colours[] = { RED, BLUE, PURPLE, TURQUOISE, ORANGE, WHITE, YELLOW };
    int i;
    for(i = 0; i < VGA_WIDTH_BINS*VGA_HEIGHT_BINS; i++) {
     4b0:	e2833001 	add	r3, r3, #1
     4b4:	e284400c 	add	r4, r4, #12
     4b8:	e3530040 	cmp	r3, #64	; 0x40
     4bc:	1affffee 	bne	47c <vga_init+0x9c>
        colour_buffer[i] = colours[i%7];
    }
}
     4c0:	e28dd058 	add	sp, sp, #88	; 0x58
     4c4:	e8bd8070 	pop	{r4, r5, r6, pc}

000004c8 <vga_show_screen>:
            vga_set_pixel(i, j, colour);
        }
    }
}

void vga_show_screen() {
     4c8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
     4cc:	e24dd014 	sub	sp, sp, #20
    const int bin_width_size = VGA_WIDTH/VGA_WIDTH_BINS;
    const int bin_height_size = VGA_HEIGHT/VGA_HEIGHT_BINS;
    int segment, x, y;
    int x_start = 0, x_end = bin_width_size;
    int y_start = 0, y_end = bin_height_size;
     4d0:	e3a0701e 	mov	r7, #30
     4d4:	e3a02000 	mov	r2, #0
     4d8:	e58d200c 	str	r2, [sp, #12]

void vga_show_screen() {
    const int bin_width_size = VGA_WIDTH/VGA_WIDTH_BINS;
    const int bin_height_size = VGA_HEIGHT/VGA_HEIGHT_BINS;
    int segment, x, y;
    int x_start = 0, x_end = bin_width_size;
     4dc:	e3a0b028 	mov	fp, #40	; 0x28
    int y_start = 0, y_end = bin_height_size;
    for(segment = 0; segment < VGA_WIDTH_BINS*VGA_HEIGHT_BINS; segment++) {
     4e0:	e1a08002 	mov	r8, r2

void vga_show_screen() {
    const int bin_width_size = VGA_WIDTH/VGA_WIDTH_BINS;
    const int bin_height_size = VGA_HEIGHT/VGA_HEIGHT_BINS;
    int segment, x, y;
    int x_start = 0, x_end = bin_width_size;
     4e4:	e58d2008 	str	r2, [sp, #8]
    int y_start = 0, y_end = bin_height_size;
    for(segment = 0; segment < VGA_WIDTH_BINS*VGA_HEIGHT_BINS; segment++) {
        for(x = x_start; x < x_end; x++) {
            for(y = y_start; y < y_end; y++) {
                if(segment == vga_segment_selection && (x == x_start || x == (x_end-1) || y == y_start || y == (y_end-1))) {
     4e8:	e301aad4 	movw	sl, #6868	; 0x1ad4
     4ec:	e340a000 	movt	sl, #0
                    vga_set_pixel(x,y,GREEN);
     4f0:	e30195bc 	movw	r9, #5564	; 0x15bc
     4f4:	e3409000 	movt	r9, #0
     4f8:	ea00003e 	b	5f8 <vga_show_screen+0x130>
    int x_start = 0, x_end = bin_width_size;
    int y_start = 0, y_end = bin_height_size;
    for(segment = 0; segment < VGA_WIDTH_BINS*VGA_HEIGHT_BINS; segment++) {
        for(x = x_start; x < x_end; x++) {
            for(y = y_start; y < y_end; y++) {
                if(segment == vga_segment_selection && (x == x_start || x == (x_end-1) || y == y_start || y == (y_end-1))) {
     4fc:	e59a3300 	ldr	r3, [sl, #768]	; 0x300
     500:	e1580003 	cmp	r8, r3
     504:	1a000013 	bne	558 <vga_show_screen+0x90>
     508:	e59d3008 	ldr	r3, [sp, #8]
     50c:	e1530005 	cmp	r3, r5
     510:	0a000008 	beq	538 <vga_show_screen+0x70>
     514:	e24b3001 	sub	r3, fp, #1
     518:	e1530005 	cmp	r3, r5
     51c:	0a000005 	beq	538 <vga_show_screen+0x70>
     520:	e59d200c 	ldr	r2, [sp, #12]
     524:	e1540002 	cmp	r4, r2
     528:	0a000002 	beq	538 <vga_show_screen+0x70>
     52c:	e2473001 	sub	r3, r7, #1
     530:	e1530004 	cmp	r3, r4
     534:	1a000007 	bne	558 <vga_show_screen+0x90>
                    vga_set_pixel(x,y,GREEN);
     538:	e5993050 	ldr	r3, [r9, #80]	; 0x50
     53c:	e58d3000 	str	r3, [sp]
     540:	e2893048 	add	r3, r9, #72	; 0x48
     544:	e893000c 	ldm	r3, {r2, r3}
     548:	e1a00005 	mov	r0, r5
     54c:	e1a01004 	mov	r1, r4
     550:	ebffff79 	bl	33c <vga_set_pixel>
     554:	ea000005 	b	570 <vga_show_screen+0xa8>
                }
                else {
                    vga_set_pixel(x,y,colour_buffer[segment]);
     558:	e5963008 	ldr	r3, [r6, #8]
     55c:	e58d3000 	str	r3, [sp]
     560:	e896000c 	ldm	r6, {r2, r3}
     564:	e1a00005 	mov	r0, r5
     568:	e1a01004 	mov	r1, r4
     56c:	ebffff72 	bl	33c <vga_set_pixel>
    int segment, x, y;
    int x_start = 0, x_end = bin_width_size;
    int y_start = 0, y_end = bin_height_size;
    for(segment = 0; segment < VGA_WIDTH_BINS*VGA_HEIGHT_BINS; segment++) {
        for(x = x_start; x < x_end; x++) {
            for(y = y_start; y < y_end; y++) {
     570:	e2844001 	add	r4, r4, #1
     574:	e1540007 	cmp	r4, r7
     578:	baffffdf 	blt	4fc <vga_show_screen+0x34>
    const int bin_height_size = VGA_HEIGHT/VGA_HEIGHT_BINS;
    int segment, x, y;
    int x_start = 0, x_end = bin_width_size;
    int y_start = 0, y_end = bin_height_size;
    for(segment = 0; segment < VGA_WIDTH_BINS*VGA_HEIGHT_BINS; segment++) {
        for(x = x_start; x < x_end; x++) {
     57c:	e2855001 	add	r5, r5, #1
     580:	e155000b 	cmp	r5, fp
     584:	ba000003 	blt	598 <vga_show_screen+0xd0>
     588:	ea000007 	b	5ac <vga_show_screen+0xe4>
     58c:	e59d5008 	ldr	r5, [sp, #8]
            for(y = y_start; y < y_end; y++) {
                if(segment == vga_segment_selection && (x == x_start || x == (x_end-1) || y == y_start || y == (y_end-1))) {
                    vga_set_pixel(x,y,GREEN);
                }
                else {
                    vga_set_pixel(x,y,colour_buffer[segment]);
     590:	e0886088 	add	r6, r8, r8, lsl #1
     594:	e08a6106 	add	r6, sl, r6, lsl #2
    int segment, x, y;
    int x_start = 0, x_end = bin_width_size;
    int y_start = 0, y_end = bin_height_size;
    for(segment = 0; segment < VGA_WIDTH_BINS*VGA_HEIGHT_BINS; segment++) {
        for(x = x_start; x < x_end; x++) {
            for(y = y_start; y < y_end; y++) {
     598:	e59d300c 	ldr	r3, [sp, #12]
     59c:	e1530007 	cmp	r3, r7
     5a0:	b59d400c 	ldrlt	r4, [sp, #12]
     5a4:	baffffd4 	blt	4fc <vga_show_screen+0x34>
     5a8:	eafffff3 	b	57c <vga_show_screen+0xb4>
                else {
                    vga_set_pixel(x,y,colour_buffer[segment]);
                }
            }
        }
        if(segment != 0 && (segment+1)%VGA_WIDTH_BINS == 0) {
     5ac:	e3580000 	cmp	r8, #0
     5b0:	0a000009 	beq	5dc <vga_show_screen+0x114>
            vga_set_pixel(i, j, colour);
        }
    }
}

void vga_show_screen() {
     5b4:	e2883001 	add	r3, r8, #1
                else {
                    vga_set_pixel(x,y,colour_buffer[segment]);
                }
            }
        }
        if(segment != 0 && (segment+1)%VGA_WIDTH_BINS == 0) {
     5b8:	e3130007 	tst	r3, #7
     5bc:	1a000006 	bne	5dc <vga_show_screen+0x114>
            y_start += bin_height_size;
            y_end = y_start + bin_height_size;
     5c0:	e59d200c 	ldr	r2, [sp, #12]
     5c4:	e282703c 	add	r7, r2, #60	; 0x3c
                    vga_set_pixel(x,y,colour_buffer[segment]);
                }
            }
        }
        if(segment != 0 && (segment+1)%VGA_WIDTH_BINS == 0) {
            y_start += bin_height_size;
     5c8:	e282201e 	add	r2, r2, #30
     5cc:	e58d200c 	str	r2, [sp, #12]
            y_end = y_start + bin_height_size;
            x_start = 0;
            x_end = bin_width_size;
     5d0:	e3a0b028 	mov	fp, #40	; 0x28
            }
        }
        if(segment != 0 && (segment+1)%VGA_WIDTH_BINS == 0) {
            y_start += bin_height_size;
            y_end = y_start + bin_height_size;
            x_start = 0;
     5d4:	e3a03000 	mov	r3, #0
            x_end = bin_width_size;
     5d8:	ea000002 	b	5e8 <vga_show_screen+0x120>
        }
        else {
            x_start += bin_width_size;
     5dc:	e59d2008 	ldr	r2, [sp, #8]
     5e0:	e2823028 	add	r3, r2, #40	; 0x28
            x_end = x_start + bin_width_size;
     5e4:	e282b050 	add	fp, r2, #80	; 0x50
    const int bin_width_size = VGA_WIDTH/VGA_WIDTH_BINS;
    const int bin_height_size = VGA_HEIGHT/VGA_HEIGHT_BINS;
    int segment, x, y;
    int x_start = 0, x_end = bin_width_size;
    int y_start = 0, y_end = bin_height_size;
    for(segment = 0; segment < VGA_WIDTH_BINS*VGA_HEIGHT_BINS; segment++) {
     5e8:	e2888001 	add	r8, r8, #1
     5ec:	e58d3008 	str	r3, [sp, #8]
     5f0:	e3580040 	cmp	r8, #64	; 0x40
     5f4:	0a000003 	beq	608 <vga_show_screen+0x140>
        for(x = x_start; x < x_end; x++) {
     5f8:	e59d3008 	ldr	r3, [sp, #8]
     5fc:	e153000b 	cmp	r3, fp
     600:	baffffe1 	blt	58c <vga_show_screen+0xc4>
     604:	eaffffe8 	b	5ac <vga_show_screen+0xe4>
        else {
            x_start += bin_width_size;
            x_end = x_start + bin_width_size;
        }
    }
}
     608:	e28dd014 	add	sp, sp, #20
     60c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000610 <vga_draw_segment>:

void vga_draw_segment(int segment) {
     610:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
     614:	e24dd014 	sub	sp, sp, #20
     618:	e1a08000 	mov	r8, r0
    const int bin_width_size = VGA_WIDTH/VGA_WIDTH_BINS;
    const int bin_height_size = VGA_HEIGHT/VGA_HEIGHT_BINS;
    int x, y;
    int x_start = (segment%VGA_WIDTH_BINS)*bin_width_size, x_end = x_start + bin_width_size;
     61c:	e1a03fc0 	asr	r3, r0, #31
     620:	e1a03ea3 	lsr	r3, r3, #29
     624:	e0806003 	add	r6, r0, r3
     628:	e2066007 	and	r6, r6, #7
     62c:	e0636006 	rsb	r6, r3, r6
     630:	e0866106 	add	r6, r6, r6, lsl #2
     634:	e1a06186 	lsl	r6, r6, #3
     638:	e1a09006 	mov	r9, r6
     63c:	e2862028 	add	r2, r6, #40	; 0x28
     640:	e58d200c 	str	r2, [sp, #12]
    int y_start = (segment/VGA_WIDTH_BINS)*bin_height_size, y_end = y_start + bin_height_size;
     644:	e2807007 	add	r7, r0, #7
     648:	e3500000 	cmp	r0, #0
     64c:	a1a07000 	movge	r7, r0
     650:	e1a071c7 	asr	r7, r7, #3
     654:	e0677207 	rsb	r7, r7, r7, lsl #4
     658:	e1a07087 	lsl	r7, r7, #1
     65c:	e58d7008 	str	r7, [sp, #8]
     660:	e287701e 	add	r7, r7, #30
    for(x = x_start; x < x_end; x++) {
     664:	e1560002 	cmp	r6, r2
     668:	ba000024 	blt	700 <vga_draw_segment+0xf0>
     66c:	ea00002e 	b	72c <vga_draw_segment+0x11c>
        for(y = y_start; y < y_end; y++) {
            if(segment == vga_segment_selection && (x == x_start || x == (x_end-1) || y == y_start || y == (y_end-1))) {
     670:	e59a3300 	ldr	r3, [sl, #768]	; 0x300
     674:	e1580003 	cmp	r8, r3
     678:	1a000012 	bne	6c8 <vga_draw_segment+0xb8>
     67c:	e1560009 	cmp	r6, r9
     680:	0a000008 	beq	6a8 <vga_draw_segment+0x98>
     684:	e2893027 	add	r3, r9, #39	; 0x27
     688:	e1530006 	cmp	r3, r6
     68c:	0a000005 	beq	6a8 <vga_draw_segment+0x98>
     690:	e59d3008 	ldr	r3, [sp, #8]
     694:	e1540003 	cmp	r4, r3
     698:	0a000002 	beq	6a8 <vga_draw_segment+0x98>
     69c:	e283301d 	add	r3, r3, #29
     6a0:	e1530004 	cmp	r3, r4
     6a4:	1a000007 	bne	6c8 <vga_draw_segment+0xb8>
                vga_set_pixel(x,y,GREEN);
     6a8:	e59b3050 	ldr	r3, [fp, #80]	; 0x50
     6ac:	e58d3000 	str	r3, [sp]
     6b0:	e28b3048 	add	r3, fp, #72	; 0x48
     6b4:	e893000c 	ldm	r3, {r2, r3}
     6b8:	e1a00006 	mov	r0, r6
     6bc:	e1a01004 	mov	r1, r4
     6c0:	ebffff1d 	bl	33c <vga_set_pixel>
     6c4:	ea000005 	b	6e0 <vga_draw_segment+0xd0>
            }
            else {
                vga_set_pixel(x,y,colour_buffer[segment]);
     6c8:	e5953008 	ldr	r3, [r5, #8]
     6cc:	e58d3000 	str	r3, [sp]
     6d0:	e895000c 	ldm	r5, {r2, r3}
     6d4:	e1a00006 	mov	r0, r6
     6d8:	e1a01004 	mov	r1, r4
     6dc:	ebffff16 	bl	33c <vga_set_pixel>
    const int bin_height_size = VGA_HEIGHT/VGA_HEIGHT_BINS;
    int x, y;
    int x_start = (segment%VGA_WIDTH_BINS)*bin_width_size, x_end = x_start + bin_width_size;
    int y_start = (segment/VGA_WIDTH_BINS)*bin_height_size, y_end = y_start + bin_height_size;
    for(x = x_start; x < x_end; x++) {
        for(y = y_start; y < y_end; y++) {
     6e0:	e2844001 	add	r4, r4, #1
     6e4:	e1570004 	cmp	r7, r4
     6e8:	1affffe0 	bne	670 <vga_draw_segment+0x60>
    const int bin_width_size = VGA_WIDTH/VGA_WIDTH_BINS;
    const int bin_height_size = VGA_HEIGHT/VGA_HEIGHT_BINS;
    int x, y;
    int x_start = (segment%VGA_WIDTH_BINS)*bin_width_size, x_end = x_start + bin_width_size;
    int y_start = (segment/VGA_WIDTH_BINS)*bin_height_size, y_end = y_start + bin_height_size;
    for(x = x_start; x < x_end; x++) {
     6ec:	e2866001 	add	r6, r6, #1
     6f0:	e59d200c 	ldr	r2, [sp, #12]
     6f4:	e1520006 	cmp	r2, r6
     6f8:	1a000006 	bne	718 <vga_draw_segment+0x108>
     6fc:	ea00000a 	b	72c <vga_draw_segment+0x11c>
        for(y = y_start; y < y_end; y++) {
            if(segment == vga_segment_selection && (x == x_start || x == (x_end-1) || y == y_start || y == (y_end-1))) {
     700:	e301aad4 	movw	sl, #6868	; 0x1ad4
     704:	e340a000 	movt	sl, #0
                vga_set_pixel(x,y,GREEN);
            }
            else {
                vga_set_pixel(x,y,colour_buffer[segment]);
     708:	e0805080 	add	r5, r0, r0, lsl #1
     70c:	e08a5105 	add	r5, sl, r5, lsl #2
    int x_start = (segment%VGA_WIDTH_BINS)*bin_width_size, x_end = x_start + bin_width_size;
    int y_start = (segment/VGA_WIDTH_BINS)*bin_height_size, y_end = y_start + bin_height_size;
    for(x = x_start; x < x_end; x++) {
        for(y = y_start; y < y_end; y++) {
            if(segment == vga_segment_selection && (x == x_start || x == (x_end-1) || y == y_start || y == (y_end-1))) {
                vga_set_pixel(x,y,GREEN);
     710:	e301b5bc 	movw	fp, #5564	; 0x15bc
     714:	e340b000 	movt	fp, #0
    const int bin_height_size = VGA_HEIGHT/VGA_HEIGHT_BINS;
    int x, y;
    int x_start = (segment%VGA_WIDTH_BINS)*bin_width_size, x_end = x_start + bin_width_size;
    int y_start = (segment/VGA_WIDTH_BINS)*bin_height_size, y_end = y_start + bin_height_size;
    for(x = x_start; x < x_end; x++) {
        for(y = y_start; y < y_end; y++) {
     718:	e59d3008 	ldr	r3, [sp, #8]
     71c:	e1530007 	cmp	r3, r7
     720:	b59d4008 	ldrlt	r4, [sp, #8]
     724:	baffffd1 	blt	670 <vga_draw_segment+0x60>
     728:	eaffffef 	b	6ec <vga_draw_segment+0xdc>
            else {
                vga_set_pixel(x,y,colour_buffer[segment]);
            }
        }
    }
}
     72c:	e28dd014 	add	sp, sp, #20
     730:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000734 <vga_increment_selection>:

void vga_increment_selection() {
     734:	e92d4008 	push	{r3, lr}
    vga_previous_segment_selection = vga_segment_selection;
     738:	e3013ad4 	movw	r3, #6868	; 0x1ad4
     73c:	e3403000 	movt	r3, #0
     740:	e5930300 	ldr	r0, [r3, #768]	; 0x300
     744:	e5830304 	str	r0, [r3, #772]	; 0x304
    if(vga_segment_selection != VGA_WIDTH_BINS*VGA_HEIGHT_BINS - 1) vga_segment_selection++;
     748:	e350003f 	cmp	r0, #63	; 0x3f
     74c:	13013ad4 	movwne	r3, #6868	; 0x1ad4
     750:	13403000 	movtne	r3, #0
     754:	12802001 	addne	r2, r0, #1
     758:	15832300 	strne	r2, [r3, #768]	; 0x300
    vga_draw_segment(vga_previous_segment_selection);
     75c:	ebffffab 	bl	610 <vga_draw_segment>
    vga_draw_segment(vga_segment_selection);
     760:	e3013ad4 	movw	r3, #6868	; 0x1ad4
     764:	e3403000 	movt	r3, #0
     768:	e5930300 	ldr	r0, [r3, #768]	; 0x300
     76c:	ebffffa7 	bl	610 <vga_draw_segment>
     770:	e8bd8008 	pop	{r3, pc}

00000774 <vga_decrement_selection>:
}

void vga_decrement_selection() {
     774:	e92d4008 	push	{r3, lr}
    vga_previous_segment_selection = vga_segment_selection;
     778:	e3013ad4 	movw	r3, #6868	; 0x1ad4
     77c:	e3403000 	movt	r3, #0
     780:	e5930300 	ldr	r0, [r3, #768]	; 0x300
     784:	e5830304 	str	r0, [r3, #772]	; 0x304
    if(vga_segment_selection != 0) vga_segment_selection--;
     788:	e3500000 	cmp	r0, #0
     78c:	13013ad4 	movwne	r3, #6868	; 0x1ad4
     790:	13403000 	movtne	r3, #0
     794:	12402001 	subne	r2, r0, #1
     798:	15832300 	strne	r2, [r3, #768]	; 0x300
    vga_draw_segment(vga_previous_segment_selection);
     79c:	ebffff9b 	bl	610 <vga_draw_segment>
    vga_draw_segment(vga_segment_selection);
     7a0:	e3013ad4 	movw	r3, #6868	; 0x1ad4
     7a4:	e3403000 	movt	r3, #0
     7a8:	e5930300 	ldr	r0, [r3, #768]	; 0x300
     7ac:	ebffff97 	bl	610 <vga_draw_segment>
     7b0:	e8bd8008 	pop	{r3, pc}

000007b4 <vga_set_segment>:
}

void vga_set_segment(int segment, colour_t colour) {
     7b4:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
     7b8:	e24dd014 	sub	sp, sp, #20
     7bc:	e28dc004 	add	ip, sp, #4
     7c0:	e88c000e 	stm	ip, {r1, r2, r3}
    colour_buffer[segment] = colour;
     7c4:	e3012ad4 	movw	r2, #6868	; 0x1ad4
     7c8:	e3402000 	movt	r2, #0
     7cc:	e0800080 	add	r0, r0, r0, lsl #1
     7d0:	e0824100 	add	r4, r2, r0, lsl #2
     7d4:	e89c0007 	ldm	ip, {r0, r1, r2}
     7d8:	e884000b 	stm	r4, {r0, r1, r3}
}
     7dc:	e28dd014 	add	sp, sp, #20
     7e0:	e8bd0010 	ldmfd	sp!, {r4}
     7e4:	e12fff1e 	bx	lr

000007e8 <vga_set_current_segment>:

void vga_set_current_segment(colour_t colour) {
     7e8:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
     7ec:	e24dd014 	sub	sp, sp, #20
     7f0:	e28d3004 	add	r3, sp, #4
     7f4:	e8830007 	stm	r3, {r0, r1, r2}
    vga_set_segment(vga_segment_selection, colour);
     7f8:	e3012ad4 	movw	r2, #6868	; 0x1ad4
     7fc:	e3402000 	movt	r2, #0
     800:	e5920300 	ldr	r0, [r2, #768]	; 0x300
     804:	e893000e 	ldm	r3, {r1, r2, r3}
     808:	ebffffe9 	bl	7b4 <vga_set_segment>
}
     80c:	e28dd014 	add	sp, sp, #20
     810:	e8bd8000 	ldmfd	sp!, {pc}

00000814 <vga_draw_current_segment>:

void vga_draw_current_segment() {
     814:	e92d4008 	push	{r3, lr}
    vga_draw_segment(vga_segment_selection);
     818:	e3013ad4 	movw	r3, #6868	; 0x1ad4
     81c:	e3403000 	movt	r3, #0
     820:	e5930300 	ldr	r0, [r3, #768]	; 0x300
     824:	ebffff79 	bl	610 <vga_draw_segment>
     828:	e8bd8008 	pop	{r3, pc}

0000082c <jtag_fifo_flush>:
}

void jtag_fifo_flush() {
    int data;
    do {
        data = jtag->data;
     82c:	e3012fff 	movw	r2, #8191	; 0x1fff
     830:	e34f2f21 	movt	r2, #65313	; 0xff21
     834:	e5123fdf 	ldr	r3, [r2, #-4063]	; 0xfffff021
    } while(data & JTAG_READY_MASK);
     838:	e3130902 	tst	r3, #32768	; 0x8000
     83c:	1afffffc 	bne	834 <jtag_fifo_flush+0x8>
}
     840:	e12fff1e 	bx	lr

00000844 <jtag_start_request>:
    int data_ready;
} carworld;

volatile jtag_t* const jtag = (jtag_t*)JTAG_BASE;

void jtag_start_request() {
     844:	e92d4008 	push	{r3, lr}
    carworld.buffer_index = 0;
     848:	e3013ad4 	movw	r3, #6868	; 0x1ad4
     84c:	e3403000 	movt	r3, #0
     850:	e3a02000 	mov	r2, #0
     854:	e583230c 	str	r2, [r3, #780]	; 0x30c
    carworld.data_ready = 0;
     858:	e5832310 	str	r2, [r3, #784]	; 0x310

    jtag_fifo_flush();
     85c:	ebfffff2 	bl	82c <jtag_fifo_flush>

    // request sliders
    jtag->data = JTAG_REQUEST_SLIDERS;
     860:	e3013fff 	movw	r3, #8191	; 0x1fff
     864:	e34f3f21 	movt	r3, #65313	; 0xff21
     868:	e3a02003 	mov	r2, #3
     86c:	e5032fdf 	str	r2, [r3, #-4063]	; 0xfffff021
     870:	e8bd8008 	pop	{r3, pc}

00000874 <jtag_read_fifo>:
        data = jtag->data;
    } while(data & JTAG_READY_MASK);
}

void jtag_read_fifo() {
    int data = jtag->data;
     874:	e3013fff 	movw	r3, #8191	; 0x1fff
     878:	e34f3f21 	movt	r3, #65313	; 0xff21
     87c:	e5132fdf 	ldr	r2, [r3, #-4063]	; 0xfffff021
    if(data & JTAG_READY_MASK) {
     880:	e3120902 	tst	r2, #32768	; 0x8000
     884:	012fff1e 	bxeq	lr
        if(carworld.buffer_index == 0) {
     888:	e3013ad4 	movw	r3, #6868	; 0x1ad4
     88c:	e3403000 	movt	r3, #0
     890:	e593330c 	ldr	r3, [r3, #780]	; 0x30c
     894:	e3530000 	cmp	r3, #0
     898:	1a000004 	bne	8b0 <jtag_read_fifo+0x3c>
            carworld.buffer_index++;
     89c:	e3013ad4 	movw	r3, #6868	; 0x1ad4
     8a0:	e3403000 	movt	r3, #0
     8a4:	e3a02001 	mov	r2, #1
     8a8:	e583230c 	str	r2, [r3, #780]	; 0x30c
     8ac:	e12fff1e 	bx	lr
        }
        else if(carworld.buffer_index == 1) {
     8b0:	e3530001 	cmp	r3, #1
     8b4:	1a000005 	bne	8d0 <jtag_read_fifo+0x5c>
            carworld.x = data & JTAG_DATA_MASK;
     8b8:	e3013ad4 	movw	r3, #6868	; 0x1ad4
     8bc:	e3403000 	movt	r3, #0
     8c0:	e5c32308 	strb	r2, [r3, #776]	; 0x308
            carworld.buffer_index++;
     8c4:	e3a02002 	mov	r2, #2
     8c8:	e583230c 	str	r2, [r3, #780]	; 0x30c
     8cc:	e12fff1e 	bx	lr
        }
        else if(carworld.buffer_index == 2) {
     8d0:	e3530002 	cmp	r3, #2
     8d4:	1a000005 	bne	8f0 <jtag_read_fifo+0x7c>
            carworld.y = data & JTAG_DATA_MASK;
     8d8:	e3013ad4 	movw	r3, #6868	; 0x1ad4
     8dc:	e3403000 	movt	r3, #0
     8e0:	e5c32309 	strb	r2, [r3, #777]	; 0x309
            carworld.buffer_index++;
     8e4:	e3a02003 	mov	r2, #3
     8e8:	e583230c 	str	r2, [r3, #780]	; 0x30c
     8ec:	e12fff1e 	bx	lr
        }
        else if(carworld.buffer_index == 3) {
     8f0:	e3530003 	cmp	r3, #3
     8f4:	112fff1e 	bxne	lr
            carworld.z = data & JTAG_DATA_MASK;
     8f8:	e3013ad4 	movw	r3, #6868	; 0x1ad4
     8fc:	e3403000 	movt	r3, #0
     900:	e5c3230a 	strb	r2, [r3, #778]	; 0x30a
            carworld.buffer_index = 0;
     904:	e3a02000 	mov	r2, #0
     908:	e583230c 	str	r2, [r3, #780]	; 0x30c
            carworld.data_ready = 1;
     90c:	e3a02001 	mov	r2, #1
     910:	e5832310 	str	r2, [r3, #784]	; 0x310
     914:	e12fff1e 	bx	lr

00000918 <get_carworld_data>:
        }
    }
}

struct _carworld* get_carworld_data() {
    carworld.data_ready = 0;
     918:	e3010ad4 	movw	r0, #6868	; 0x1ad4
     91c:	e3400000 	movt	r0, #0
     920:	e3a03000 	mov	r3, #0
     924:	e5803310 	str	r3, [r0, #784]	; 0x310
    return &carworld;
}
     928:	e2800fc2 	add	r0, r0, #776	; 0x308
     92c:	e12fff1e 	bx	lr

00000930 <carworld_to_colour>:

void carworld_to_colour(struct _carworld* car, colour_t* colour) {
     930:	e92d4070 	push	{r4, r5, r6, lr}
     934:	e24dd008 	sub	sp, sp, #8
     938:	e1a05000 	mov	r5, r0
     93c:	e1a04001 	mov	r4, r1
    colour->red = map((car->x+CARWORLD_SLIDER_OFFSET), 0, CARWORLD_MAX_SLIDER, 0, VGA_MAX_RED);
     940:	e1d000d0 	ldrsb	r0, [r0]
     944:	e3a0601f 	mov	r6, #31
     948:	e58d6000 	str	r6, [sp]
     94c:	e2800080 	add	r0, r0, #128	; 0x80
     950:	e3a01000 	mov	r1, #0
     954:	e3a020ff 	mov	r2, #255	; 0xff
     958:	e1a03001 	mov	r3, r1
     95c:	ebfffe3e 	bl	25c <map>
     960:	e5840000 	str	r0, [r4]
    colour->green = map((car->y+CARWORLD_SLIDER_OFFSET), 0, CARWORLD_MAX_SLIDER, 0, VGA_MAX_GREEN);
     964:	e1d500d1 	ldrsb	r0, [r5, #1]
     968:	e3a0303f 	mov	r3, #63	; 0x3f
     96c:	e58d3000 	str	r3, [sp]
     970:	e2800080 	add	r0, r0, #128	; 0x80
     974:	e3a01000 	mov	r1, #0
     978:	e3a020ff 	mov	r2, #255	; 0xff
     97c:	e1a03001 	mov	r3, r1
     980:	ebfffe35 	bl	25c <map>
     984:	e5840004 	str	r0, [r4, #4]
    colour->blue = map((car->z+CARWORLD_SLIDER_OFFSET), 0, CARWORLD_MAX_SLIDER, 0, VGA_MAX_BLUE);
     988:	e1d500d2 	ldrsb	r0, [r5, #2]
     98c:	e58d6000 	str	r6, [sp]
     990:	e2800080 	add	r0, r0, #128	; 0x80
     994:	e3a01000 	mov	r1, #0
     998:	e3a020ff 	mov	r2, #255	; 0xff
     99c:	e1a03001 	mov	r3, r1
     9a0:	ebfffe2d 	bl	25c <map>
     9a4:	e5840008 	str	r0, [r4, #8]
     9a8:	e28dd008 	add	sp, sp, #8
     9ac:	e8bd8070 	pop	{r4, r5, r6, pc}

000009b0 <config_KEYs>:
/*setup the KEY interrupts in the FPGA*/
void config_KEYs()
{
	volatile int * KEY_ptr = (int*) 0xFF200050;   // KEY base address

	*(KEY_ptr + 2) = 0xF;		// enable interrupts for all four KEYs
     9b0:	e3a03000 	mov	r3, #0
     9b4:	e34f3f20 	movt	r3, #65312	; 0xff20
     9b8:	e3a0200f 	mov	r2, #15
     9bc:	e5832058 	str	r2, [r3, #88]	; 0x58
     9c0:	e12fff1e 	bx	lr

000009c4 <__cs3_reset>:
	*((int*) 0xFFFEC110) = interrupt_ID;
}

// Define the remaining exception handlers
void __attribute__ ((interrupt)) __cs3_reset (void)
{
     9c4:	eafffffe 	b	9c4 <__cs3_reset>

000009c8 <__cs3_isr_undef>:
	while(1);
}
void __attribute__ ((interrupt)) __cs3_isr_undef (void)
{
     9c8:	eafffffe 	b	9c8 <__cs3_isr_undef>

000009cc <__cs3_isr_swi>:
	while(1);
}
void __attribute__ ((interrupt)) __cs3_isr_swi (void)
{
     9cc:	eafffffe 	b	9cc <__cs3_isr_swi>

000009d0 <__cs3_isr_pabort>:
	while(1);
}
void __attribute__ ((interrupt)) __cs3_isr_pabort (void)
{
     9d0:	eafffffe 	b	9d0 <__cs3_isr_pabort>

000009d4 <__cs3_isr_dabort>:
	while(1);
}
void __attribute__ ((interrupt)) __cs3_isr_dabort (void)
{
     9d4:	eafffffe 	b	9d4 <__cs3_isr_dabort>

000009d8 <__cs3_isr_fiq>:
	while(1);
}
void __attribute__ ((interrupt)) __cs3_isr_fiq (void)
{
     9d8:	eafffffe 	b	9d8 <__cs3_isr_fiq>

000009dc <disable_A9_interrupts>:
 *Turn off interrupts in the ARM processor
*/
void disable_A9_interrupts(void)
{
	int status = 0b11010011;
	asm("msr cpsr, %[ps]" : : [ps]"r"(status));
     9dc:	e3a030d3 	mov	r3, #211	; 0xd3
     9e0:	e129f003 	msr	CPSR_fc, r3
     9e4:	e12fff1e 	bx	lr

000009e8 <set_A9_IRQ_stack>:
{
	int stack, mode;
	stack = 0xFFFFFFFF - 7;      // top of A9 onchip memory, aligned to 8 bytes
	/*change processor to IRQ mode with interrupts disabled*/
	mode = 0b11010010;
	asm("msr cpsr, %[ps]" : : [ps] "r" (mode));
     9e8:	e3a030d2 	mov	r3, #210	; 0xd2
     9ec:	e129f003 	msr	CPSR_fc, r3
	/*set banked stack pointer*/
	asm("mov sp, %[ps]" : : [ps] "r" (stack));
     9f0:	e3e03007 	mvn	r3, #7
     9f4:	e1a0d003 	mov	sp, r3

	/*go back to SVC mode before executing subroutine return!*/
	mode = 0b11010011;
	asm("msr cpsr, %[ps]" : : [ps] "r" (mode));
     9f8:	e3a030d3 	mov	r3, #211	; 0xd3
     9fc:	e129f003 	msr	CPSR_fc, r3
     a00:	e12fff1e 	bx	lr

00000a04 <enable_A9_interrupts>:
 *Turn on interrupts in the ARM processor
*/
void enable_A9_interrupts(void)
{
	int status = 0b01010011;
	asm("msr cpsr, %[ps]" : : [ps]"r"(status));
     a04:	e3a03053 	mov	r3, #83	; 0x53
     a08:	e129f003 	msr	CPSR_fc, r3
     a0c:	e12fff1e 	bx	lr

00000a10 <config_interrupt>:
 *configure only the Interrupt Set Enable Registers (ICDISERn) and
 *Interrupt Processor Target Registers (ICDIPTRn). The default (reset)
 *values are used for other registers in the GIC
*/
void config_interrupt (int N, int CPU_target)
{
     a10:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
	int reg_offset, index, value, address;

	/* Configure the Interrupt Set-Enable Registers (ICDISERn).
	 * reg_offset = (integer_div(N / 32)*4; value = 1 << (N mod 32)*/
	reg_offset = (N >> 3) & 0xFFFFFFFC;
     a14:	e1a031c0 	asr	r3, r0, #3
     a18:	e3c33003 	bic	r3, r3, #3
	index = N & 0x1F;
	value = 0x1 << index;
	address = 0xFFFED100 + reg_offset;
     a1c:	e2433b4b 	sub	r3, r3, #76800	; 0x12c00
	int reg_offset, index, value, address;

	/* Configure the Interrupt Set-Enable Registers (ICDISERn).
	 * reg_offset = (integer_div(N / 32)*4; value = 1 << (N mod 32)*/
	reg_offset = (N >> 3) & 0xFFFFFFFC;
	index = N & 0x1F;
     a20:	e200201f 	and	r2, r0, #31
	value = 0x1 << index;
	address = 0xFFFED100 + reg_offset;
	/* Using the address and value, set the appropriate bit */
	*(int*)address |= value;
     a24:	e513c300 	ldr	ip, [r3, #-768]	; 0xfffffd00
     a28:	e3a04001 	mov	r4, #1
     a2c:	e18c2214 	orr	r2, ip, r4, lsl r2
     a30:	e5032300 	str	r2, [r3, #-768]	; 0xfffffd00
	reg_offset = (N & 0xFFFFFFFC);
	index = N & 0x3;
	address = 0xFFFED800 + reg_offset + index;

	/*Using the address and value, write to (only) the appropriate byte*/
	*(char*)address = (char) CPU_target;
     a34:	e2400b4a 	sub	r0, r0, #75776	; 0x12800
     a38:	e5c01000 	strb	r1, [r0]
}
     a3c:	e8bd0010 	ldmfd	sp!, {r4}
     a40:	e12fff1e 	bx	lr

00000a44 <config_GIC>:

/*
 *Configure the Generic Interrupt Controller (GIC)
*/
void config_GIC(void)
{
     a44:	e92d4008 	push	{r3, lr}
	config_interrupt (73, 1);    // configure the FPGA KEYs interrupt (73)
     a48:	e3a00049 	mov	r0, #73	; 0x49
     a4c:	e3a01001 	mov	r1, #1
     a50:	ebffffee 	bl	a10 <config_interrupt>

	// Set Interrupt Priority Mask Register (ICCPMR). Enable all priorities
	*((int*) 0xFFFEC104) = 0xFFFF;
     a54:	e3e02a13 	mvn	r2, #77824	; 0x13000
     a58:	e30f3fff 	movw	r3, #65535	; 0xffff
     a5c:	e5023efb 	str	r3, [r2, #-3835]	; 0xfffff105

	// Set the enable in the CPU Interface Control Register (ICCICR)
	*((int*) 0xFFFEC100) = 1;
     a60:	e3a03001 	mov	r3, #1
     a64:	e5023eff 	str	r3, [r2, #-3839]	; 0xfffff101

	// Set the enable in the Distributor Control Register (ICDDCR)
	*((int*) 0xFFFED000) = 1;
     a68:	e3e02a12 	mvn	r2, #73728	; 0x12000
     a6c:	e5023fff 	str	r3, [r2, #-4095]	; 0xfffff001
     a70:	e8bd8008 	pop	{r3, pc}

00000a74 <pushbutton_ISR>:
 * Pushbutton - Interrupt Service Routine
 *
 * This routine checks which KEY has been pressed. It writes to HEX0
 *******************************************************************/
void pushbutton_ISR( void )
{
     a74:	e92d4008 	push	{r3, lr}
	volatile int*KEY_ptr = (int*) 0xFF200050;
	/*HEX display base address*/
	volatile int*HEX3_HEX0_ptr = (int*) 0xFF200020;
	int press, HEX_bits;

	press =*(KEY_ptr + 3);     // read the pushbutton interrupt register
     a78:	e3a02000 	mov	r2, #0
     a7c:	e34f2f20 	movt	r2, #65312	; 0xff20
     a80:	e592305c 	ldr	r3, [r2, #92]	; 0x5c
	*(KEY_ptr + 3) = press;     // Clear the interrupt
     a84:	e582305c 	str	r3, [r2, #92]	; 0x5c

	if (press & 0x1) {           // KEY0
     a88:	e3130001 	tst	r3, #1
     a8c:	0a000002 	beq	a9c <pushbutton_ISR+0x28>
		HEX_bits = 0b00111111;
		vga_increment_selection();
     a90:	ebffff27 	bl	734 <vga_increment_selection>

	press =*(KEY_ptr + 3);     // read the pushbutton interrupt register
	*(KEY_ptr + 3) = press;     // Clear the interrupt

	if (press & 0x1) {           // KEY0
		HEX_bits = 0b00111111;
     a94:	e3a0303f 	mov	r3, #63	; 0x3f
     a98:	ea000008 	b	ac0 <pushbutton_ISR+0x4c>
		vga_increment_selection();
	}
	else if (press & 0x2) {      // KEY1
     a9c:	e3130002 	tst	r3, #2
     aa0:	0a000002 	beq	ab0 <pushbutton_ISR+0x3c>
		HEX_bits = 0b00000110;
		vga_decrement_selection();
     aa4:	ebffff32 	bl	774 <vga_decrement_selection>
	if (press & 0x1) {           // KEY0
		HEX_bits = 0b00111111;
		vga_increment_selection();
	}
	else if (press & 0x2) {      // KEY1
		HEX_bits = 0b00000110;
     aa8:	e3a03006 	mov	r3, #6
     aac:	ea000003 	b	ac0 <pushbutton_ISR+0x4c>
		vga_decrement_selection();
	}
	else if (press & 0x4) {      // KEY2
     ab0:	e2033004 	and	r3, r3, #4
		HEX_bits = 0b01011011;
     ab4:	e3530000 	cmp	r3, #0
     ab8:	03a0304f 	moveq	r3, #79	; 0x4f
     abc:	13a0305b 	movne	r3, #91	; 0x5b
	}
	else {                       // press & 0x8, which is KEY3
		HEX_bits = 0b01001111;
	}

	*HEX3_HEX0_ptr = HEX_bits;
     ac0:	e3a02000 	mov	r2, #0
     ac4:	e34f2f20 	movt	r2, #65312	; 0xff20
     ac8:	e5823020 	str	r3, [r2, #32]
     acc:	e8bd8008 	pop	{r3, pc}

00000ad0 <__cs3_isr_irq>:
void pushbutton_ISR (void);
void config_interrupt (int, int);

// Define the IRQ exception handler
void __attribute__ ((interrupt)) __cs3_isr_irq (void)
{
     ad0:	e24ee004 	sub	lr, lr, #4
     ad4:	e92d500f 	push	{r0, r1, r2, r3, ip, lr}
	// Read the ICCIAR from the CPU Interface in the GIC
	int interrupt_ID = *((int*) 0xFFFEC10C);
     ad8:	e3e03a13 	mvn	r3, #77824	; 0x13000

	if (interrupt_ID == 73)		// check if interrupt is from the KEYs
     adc:	e5133ef3 	ldr	r3, [r3, #-3827]	; 0xfffff10d
     ae0:	e3530049 	cmp	r3, #73	; 0x49
     ae4:	1a000004 	bne	afc <__cs3_isr_irq+0x2c>
		pushbutton_ISR ();
     ae8:	ebffffe1 	bl	a74 <pushbutton_ISR>
	else
		while (1);		// if unexpected, then stay here

	// Write to the End of Interrupt Register (ICCEOIR)
	*((int*) 0xFFFEC110) = interrupt_ID;
     aec:	e3a02049 	mov	r2, #73	; 0x49
     af0:	e3e03a13 	mvn	r3, #77824	; 0x13000
     af4:	e5032eef 	str	r2, [r3, #-3823]	; 0xfffff111
     af8:	e8fd900f 	ldm	sp!, {r0, r1, r2, r3, ip, pc}^
     afc:	eafffffe 	b	afc <__cs3_isr_irq+0x2c>

00000b00 <main>:
#include "address_map_arm.h"
#include "vga.h"
#include "jtag.h"
#include "interrupts.h"

int main(void) {
     b00:	e92d4030 	push	{r4, r5, lr}
     b04:	e24dd014 	sub	sp, sp, #20
    set_A9_IRQ_stack();
     b08:	ebffffb6 	bl	9e8 <set_A9_IRQ_stack>
    config_GIC();
     b0c:	ebffffcc 	bl	a44 <config_GIC>
    config_KEYs();
     b10:	ebffffa6 	bl	9b0 <config_KEYs>
    enable_A9_interrupts();
     b14:	ebffffba 	bl	a04 <enable_A9_interrupts>
    vga_init();
     b18:	ebfffe30 	bl	3e0 <vga_init>
    vga_set_screen(BLACK);
     b1c:	e30135bc 	movw	r3, #5564	; 0x15bc
     b20:	e3403000 	movt	r3, #0
     b24:	e8930007 	ldm	r3, {r0, r1, r2}
     b28:	ebfffe14 	bl	380 <vga_set_screen>
    vga_show_screen();
     b2c:	ebfffe65 	bl	4c8 <vga_show_screen>
    int i;
    for(i = 0; i < VGA_WIDTH_BINS*VGA_HEIGHT_BINS; i++) {
     b30:	e3a04000 	mov	r4, #0
        vga_set_segment(i, RED);
     b34:	e30155bc 	movw	r5, #5564	; 0x15bc
     b38:	e3405000 	movt	r5, #0
     b3c:	e1a00004 	mov	r0, r4
     b40:	e2853054 	add	r3, r5, #84	; 0x54
     b44:	e893000e 	ldm	r3, {r1, r2, r3}
     b48:	ebffff19 	bl	7b4 <vga_set_segment>
    enable_A9_interrupts();
    vga_init();
    vga_set_screen(BLACK);
    vga_show_screen();
    int i;
    for(i = 0; i < VGA_WIDTH_BINS*VGA_HEIGHT_BINS; i++) {
     b4c:	e2844001 	add	r4, r4, #1
     b50:	e3540040 	cmp	r4, #64	; 0x40
     b54:	1afffff8 	bne	b3c <main+0x3c>
        vga_set_segment(i, RED);
    }
    jtag_start_request();
     b58:	ebffff39 	bl	844 <jtag_start_request>
    while(1) {
        if(carworld.data_ready == 1) {
     b5c:	e3014ad4 	movw	r4, #6868	; 0x1ad4
     b60:	e3404000 	movt	r4, #0
            colour_t col;
            struct _carworld* data = get_carworld_data();
            carworld_to_colour(data, &col);
     b64:	e28d5004 	add	r5, sp, #4
    for(i = 0; i < VGA_WIDTH_BINS*VGA_HEIGHT_BINS; i++) {
        vga_set_segment(i, RED);
    }
    jtag_start_request();
    while(1) {
        if(carworld.data_ready == 1) {
     b68:	e5943310 	ldr	r3, [r4, #784]	; 0x310
     b6c:	e3530001 	cmp	r3, #1
     b70:	1a000007 	bne	b94 <main+0x94>
            colour_t col;
            struct _carworld* data = get_carworld_data();
     b74:	ebffff67 	bl	918 <get_carworld_data>
            carworld_to_colour(data, &col);
     b78:	e1a01005 	mov	r1, r5
     b7c:	ebffff6b 	bl	930 <carworld_to_colour>
            jtag_start_request();
     b80:	ebffff2f 	bl	844 <jtag_start_request>
            vga_set_current_segment(col);
     b84:	e8950007 	ldm	r5, {r0, r1, r2}
     b88:	ebffff16 	bl	7e8 <vga_set_current_segment>
            vga_draw_current_segment();
     b8c:	ebffff20 	bl	814 <vga_draw_current_segment>
     b90:	eafffff4 	b	b68 <main+0x68>
            // Note: they will handle overflows by just remaining at the first or last segment
            // vga_increment_selection()
            // vga_decrement_selection()
        }
        else {
            jtag_read_fifo();
     b94:	ebffff36 	bl	874 <jtag_read_fifo>
     b98:	eafffff2 	b	b68 <main+0x68>

00000b9c <__aeabi_frsub>:
     b9c:	e2200102 	eor	r0, r0, #-2147483648	; 0x80000000
     ba0:	ea000000 	b	ba8 <__addsf3>

00000ba4 <__aeabi_fsub>:
     ba4:	e2211102 	eor	r1, r1, #-2147483648	; 0x80000000

00000ba8 <__addsf3>:
     ba8:	e1b02080 	lsls	r2, r0, #1
     bac:	11b03081 	lslsne	r3, r1, #1
     bb0:	11320003 	teqne	r2, r3
     bb4:	11f0cc42 	mvnsne	ip, r2, asr #24
     bb8:	11f0cc43 	mvnsne	ip, r3, asr #24
     bbc:	0a000047 	beq	ce0 <__addsf3+0x138>
     bc0:	e1a02c22 	lsr	r2, r2, #24
     bc4:	e0723c23 	rsbs	r3, r2, r3, lsr #24
     bc8:	c0822003 	addgt	r2, r2, r3
     bcc:	c0201001 	eorgt	r1, r0, r1
     bd0:	c0210000 	eorgt	r0, r1, r0
     bd4:	c0201001 	eorgt	r1, r0, r1
     bd8:	b2633000 	rsblt	r3, r3, #0
     bdc:	e3530019 	cmp	r3, #25
     be0:	812fff1e 	bxhi	lr
     be4:	e3100102 	tst	r0, #-2147483648	; 0x80000000
     be8:	e3800502 	orr	r0, r0, #8388608	; 0x800000
     bec:	e3c004ff 	bic	r0, r0, #-16777216	; 0xff000000
     bf0:	12600000 	rsbne	r0, r0, #0
     bf4:	e3110102 	tst	r1, #-2147483648	; 0x80000000
     bf8:	e3811502 	orr	r1, r1, #8388608	; 0x800000
     bfc:	e3c114ff 	bic	r1, r1, #-16777216	; 0xff000000
     c00:	12611000 	rsbne	r1, r1, #0
     c04:	e1320003 	teq	r2, r3
     c08:	0a00002e 	beq	cc8 <__addsf3+0x120>
     c0c:	e2422001 	sub	r2, r2, #1
     c10:	e0900351 	adds	r0, r0, r1, asr r3
     c14:	e2633020 	rsb	r3, r3, #32
     c18:	e1a01311 	lsl	r1, r1, r3
     c1c:	e2003102 	and	r3, r0, #-2147483648	; 0x80000000
     c20:	5a000001 	bpl	c2c <__addsf3+0x84>
     c24:	e2711000 	rsbs	r1, r1, #0
     c28:	e2e00000 	rsc	r0, r0, #0
     c2c:	e3500502 	cmp	r0, #8388608	; 0x800000
     c30:	3a00000b 	bcc	c64 <__addsf3+0xbc>
     c34:	e3500401 	cmp	r0, #16777216	; 0x1000000
     c38:	3a000004 	bcc	c50 <__addsf3+0xa8>
     c3c:	e1b000a0 	lsrs	r0, r0, #1
     c40:	e1a01061 	rrx	r1, r1
     c44:	e2822001 	add	r2, r2, #1
     c48:	e35200fe 	cmp	r2, #254	; 0xfe
     c4c:	2a000038 	bcs	d34 <__addsf3+0x18c>
     c50:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
     c54:	e0a00b82 	adc	r0, r0, r2, lsl #23
     c58:	03c00001 	biceq	r0, r0, #1
     c5c:	e1800003 	orr	r0, r0, r3
     c60:	e12fff1e 	bx	lr
     c64:	e1b01081 	lsls	r1, r1, #1
     c68:	e0a00000 	adc	r0, r0, r0
     c6c:	e3100502 	tst	r0, #8388608	; 0x800000
     c70:	e2422001 	sub	r2, r2, #1
     c74:	1afffff5 	bne	c50 <__addsf3+0xa8>
     c78:	e1b0c620 	lsrs	ip, r0, #12
     c7c:	01a00600 	lsleq	r0, r0, #12
     c80:	0242200c 	subeq	r2, r2, #12
     c84:	e31008ff 	tst	r0, #16711680	; 0xff0000
     c88:	01a00400 	lsleq	r0, r0, #8
     c8c:	02422008 	subeq	r2, r2, #8
     c90:	e310060f 	tst	r0, #15728640	; 0xf00000
     c94:	01a00200 	lsleq	r0, r0, #4
     c98:	02422004 	subeq	r2, r2, #4
     c9c:	e3100503 	tst	r0, #12582912	; 0xc00000
     ca0:	01a00100 	lsleq	r0, r0, #2
     ca4:	02422002 	subeq	r2, r2, #2
     ca8:	e3500502 	cmp	r0, #8388608	; 0x800000
     cac:	31a00080 	lslcc	r0, r0, #1
     cb0:	e2d22000 	sbcs	r2, r2, #0
     cb4:	a0800b82 	addge	r0, r0, r2, lsl #23
     cb8:	b2622000 	rsblt	r2, r2, #0
     cbc:	a1800003 	orrge	r0, r0, r3
     cc0:	b1830230 	orrlt	r0, r3, r0, lsr r2
     cc4:	e12fff1e 	bx	lr
     cc8:	e3320000 	teq	r2, #0
     ccc:	e2211502 	eor	r1, r1, #8388608	; 0x800000
     cd0:	02200502 	eoreq	r0, r0, #8388608	; 0x800000
     cd4:	02822001 	addeq	r2, r2, #1
     cd8:	12433001 	subne	r3, r3, #1
     cdc:	eaffffca 	b	c0c <__addsf3+0x64>
     ce0:	e1a03081 	lsl	r3, r1, #1
     ce4:	e1f0cc42 	mvns	ip, r2, asr #24
     ce8:	11f0cc43 	mvnsne	ip, r3, asr #24
     cec:	0a000013 	beq	d40 <__addsf3+0x198>
     cf0:	e1320003 	teq	r2, r3
     cf4:	0a000002 	beq	d04 <__addsf3+0x15c>
     cf8:	e3320000 	teq	r2, #0
     cfc:	01a00001 	moveq	r0, r1
     d00:	e12fff1e 	bx	lr
     d04:	e1300001 	teq	r0, r1
     d08:	13a00000 	movne	r0, #0
     d0c:	112fff1e 	bxne	lr
     d10:	e31204ff 	tst	r2, #-16777216	; 0xff000000
     d14:	1a000002 	bne	d24 <__addsf3+0x17c>
     d18:	e1b00080 	lsls	r0, r0, #1
     d1c:	23800102 	orrcs	r0, r0, #-2147483648	; 0x80000000
     d20:	e12fff1e 	bx	lr
     d24:	e2922402 	adds	r2, r2, #33554432	; 0x2000000
     d28:	32800502 	addcc	r0, r0, #8388608	; 0x800000
     d2c:	312fff1e 	bxcc	lr
     d30:	e2003102 	and	r3, r0, #-2147483648	; 0x80000000
     d34:	e383047f 	orr	r0, r3, #2130706432	; 0x7f000000
     d38:	e3800502 	orr	r0, r0, #8388608	; 0x800000
     d3c:	e12fff1e 	bx	lr
     d40:	e1f02c42 	mvns	r2, r2, asr #24
     d44:	11a00001 	movne	r0, r1
     d48:	01f03c43 	mvnseq	r3, r3, asr #24
     d4c:	11a01000 	movne	r1, r0
     d50:	e1b02480 	lsls	r2, r0, #9
     d54:	01b03481 	lslseq	r3, r1, #9
     d58:	01300001 	teqeq	r0, r1
     d5c:	13800501 	orrne	r0, r0, #4194304	; 0x400000
     d60:	e12fff1e 	bx	lr

00000d64 <__aeabi_ui2f>:
     d64:	e3a03000 	mov	r3, #0
     d68:	ea000001 	b	d74 <__aeabi_i2f+0x8>

00000d6c <__aeabi_i2f>:
     d6c:	e2103102 	ands	r3, r0, #-2147483648	; 0x80000000
     d70:	42600000 	rsbmi	r0, r0, #0
     d74:	e1b0c000 	movs	ip, r0
     d78:	012fff1e 	bxeq	lr
     d7c:	e383344b 	orr	r3, r3, #1258291200	; 0x4b000000
     d80:	e1a01000 	mov	r1, r0
     d84:	e3a00000 	mov	r0, #0
     d88:	ea00000f 	b	dcc <__aeabi_l2f+0x30>

00000d8c <__aeabi_ul2f>:
     d8c:	e1902001 	orrs	r2, r0, r1
     d90:	012fff1e 	bxeq	lr
     d94:	e3a03000 	mov	r3, #0
     d98:	ea000005 	b	db4 <__aeabi_l2f+0x18>

00000d9c <__aeabi_l2f>:
     d9c:	e1902001 	orrs	r2, r0, r1
     da0:	012fff1e 	bxeq	lr
     da4:	e2113102 	ands	r3, r1, #-2147483648	; 0x80000000
     da8:	5a000001 	bpl	db4 <__aeabi_l2f+0x18>
     dac:	e2700000 	rsbs	r0, r0, #0
     db0:	e2e11000 	rsc	r1, r1, #0
     db4:	e1b0c001 	movs	ip, r1
     db8:	01a0c000 	moveq	ip, r0
     dbc:	01a01000 	moveq	r1, r0
     dc0:	03a00000 	moveq	r0, #0
     dc4:	e383345b 	orr	r3, r3, #1526726656	; 0x5b000000
     dc8:	02433201 	subeq	r3, r3, #268435456	; 0x10000000
     dcc:	e2433502 	sub	r3, r3, #8388608	; 0x800000
     dd0:	e3a02017 	mov	r2, #23
     dd4:	e35c0801 	cmp	ip, #65536	; 0x10000
     dd8:	21a0c82c 	lsrcs	ip, ip, #16
     ddc:	22422010 	subcs	r2, r2, #16
     de0:	e35c0c01 	cmp	ip, #256	; 0x100
     de4:	21a0c42c 	lsrcs	ip, ip, #8
     de8:	22422008 	subcs	r2, r2, #8
     dec:	e35c0010 	cmp	ip, #16
     df0:	21a0c22c 	lsrcs	ip, ip, #4
     df4:	22422004 	subcs	r2, r2, #4
     df8:	e35c0004 	cmp	ip, #4
     dfc:	22422002 	subcs	r2, r2, #2
     e00:	304220ac 	subcc	r2, r2, ip, lsr #1
     e04:	e05221ac 	subs	r2, r2, ip, lsr #3
     e08:	e0433b82 	sub	r3, r3, r2, lsl #23
     e0c:	ba000006 	blt	e2c <__aeabi_l2f+0x90>
     e10:	e0833211 	add	r3, r3, r1, lsl r2
     e14:	e1a0c210 	lsl	ip, r0, r2
     e18:	e2622020 	rsb	r2, r2, #32
     e1c:	e35c0102 	cmp	ip, #-2147483648	; 0x80000000
     e20:	e0a30230 	adc	r0, r3, r0, lsr r2
     e24:	03c00001 	biceq	r0, r0, #1
     e28:	e12fff1e 	bx	lr
     e2c:	e2822020 	add	r2, r2, #32
     e30:	e1a0c211 	lsl	ip, r1, r2
     e34:	e2622020 	rsb	r2, r2, #32
     e38:	e190008c 	orrs	r0, r0, ip, lsl #1
     e3c:	e0a30231 	adc	r0, r3, r1, lsr r2
     e40:	01c00fac 	biceq	r0, r0, ip, lsr #31
     e44:	e12fff1e 	bx	lr

00000e48 <__aeabi_fmul>:
     e48:	e3a0c0ff 	mov	ip, #255	; 0xff
     e4c:	e01c2ba0 	ands	r2, ip, r0, lsr #23
     e50:	101c3ba1 	andsne	r3, ip, r1, lsr #23
     e54:	1132000c 	teqne	r2, ip
     e58:	1133000c 	teqne	r3, ip
     e5c:	0a00003e 	beq	f5c <__aeabi_fmul+0x114>
     e60:	e0822003 	add	r2, r2, r3
     e64:	e020c001 	eor	ip, r0, r1
     e68:	e1b00480 	lsls	r0, r0, #9
     e6c:	11b01481 	lslsne	r1, r1, #9
     e70:	0a000010 	beq	eb8 <__aeabi_fmul+0x70>
     e74:	e3a03302 	mov	r3, #134217728	; 0x8000000
     e78:	e18302a0 	orr	r0, r3, r0, lsr #5
     e7c:	e18312a1 	orr	r1, r3, r1, lsr #5
     e80:	e0813190 	umull	r3, r1, r0, r1
     e84:	e20c0102 	and	r0, ip, #-2147483648	; 0x80000000
     e88:	e3510502 	cmp	r1, #8388608	; 0x800000
     e8c:	31a01081 	lslcc	r1, r1, #1
     e90:	31811fa3 	orrcc	r1, r1, r3, lsr #31
     e94:	31a03083 	lslcc	r3, r3, #1
     e98:	e1800001 	orr	r0, r0, r1
     e9c:	e2c2207f 	sbc	r2, r2, #127	; 0x7f
     ea0:	e35200fd 	cmp	r2, #253	; 0xfd
     ea4:	8a00000f 	bhi	ee8 <__aeabi_fmul+0xa0>
     ea8:	e3530102 	cmp	r3, #-2147483648	; 0x80000000
     eac:	e0a00b82 	adc	r0, r0, r2, lsl #23
     eb0:	03c00001 	biceq	r0, r0, #1
     eb4:	e12fff1e 	bx	lr
     eb8:	e3300000 	teq	r0, #0
     ebc:	e20cc102 	and	ip, ip, #-2147483648	; 0x80000000
     ec0:	01a01481 	lsleq	r1, r1, #9
     ec4:	e18c04a0 	orr	r0, ip, r0, lsr #9
     ec8:	e18004a1 	orr	r0, r0, r1, lsr #9
     ecc:	e252207f 	subs	r2, r2, #127	; 0x7f
     ed0:	c27230ff 	rsbsgt	r3, r2, #255	; 0xff
     ed4:	c1800b82 	orrgt	r0, r0, r2, lsl #23
     ed8:	c12fff1e 	bxgt	lr
     edc:	e3800502 	orr	r0, r0, #8388608	; 0x800000
     ee0:	e3a03000 	mov	r3, #0
     ee4:	e2522001 	subs	r2, r2, #1
     ee8:	ca000035 	bgt	fc4 <__aeabi_fmul+0x17c>
     eec:	e3720019 	cmn	r2, #25
     ef0:	d2000102 	andle	r0, r0, #-2147483648	; 0x80000000
     ef4:	d12fff1e 	bxle	lr
     ef8:	e2622000 	rsb	r2, r2, #0
     efc:	e1b01080 	lsls	r1, r0, #1
     f00:	e1a01231 	lsr	r1, r1, r2
     f04:	e2622020 	rsb	r2, r2, #32
     f08:	e1a0c210 	lsl	ip, r0, r2
     f0c:	e1b00061 	rrxs	r0, r1
     f10:	e2a00000 	adc	r0, r0, #0
     f14:	e193308c 	orrs	r3, r3, ip, lsl #1
     f18:	01c00fac 	biceq	r0, r0, ip, lsr #31
     f1c:	e12fff1e 	bx	lr
     f20:	e3320000 	teq	r2, #0
     f24:	e200c102 	and	ip, r0, #-2147483648	; 0x80000000
     f28:	01a00080 	lsleq	r0, r0, #1
     f2c:	03100502 	tsteq	r0, #8388608	; 0x800000
     f30:	02422001 	subeq	r2, r2, #1
     f34:	0afffffb 	beq	f28 <__aeabi_fmul+0xe0>
     f38:	e180000c 	orr	r0, r0, ip
     f3c:	e3330000 	teq	r3, #0
     f40:	e201c102 	and	ip, r1, #-2147483648	; 0x80000000
     f44:	01a01081 	lsleq	r1, r1, #1
     f48:	03110502 	tsteq	r1, #8388608	; 0x800000
     f4c:	02433001 	subeq	r3, r3, #1
     f50:	0afffffb 	beq	f44 <__aeabi_fmul+0xfc>
     f54:	e181100c 	orr	r1, r1, ip
     f58:	eaffffc0 	b	e60 <__aeabi_fmul+0x18>
     f5c:	e00c3ba1 	and	r3, ip, r1, lsr #23
     f60:	e132000c 	teq	r2, ip
     f64:	1133000c 	teqne	r3, ip
     f68:	0a000005 	beq	f84 <__aeabi_fmul+0x13c>
     f6c:	e3d0c102 	bics	ip, r0, #-2147483648	; 0x80000000
     f70:	13d1c102 	bicsne	ip, r1, #-2147483648	; 0x80000000
     f74:	1affffe9 	bne	f20 <__aeabi_fmul+0xd8>
     f78:	e0200001 	eor	r0, r0, r1
     f7c:	e2000102 	and	r0, r0, #-2147483648	; 0x80000000
     f80:	e12fff1e 	bx	lr
     f84:	e3300000 	teq	r0, #0
     f88:	13300102 	teqne	r0, #-2147483648	; 0x80000000
     f8c:	01a00001 	moveq	r0, r1
     f90:	13310000 	teqne	r1, #0
     f94:	13310102 	teqne	r1, #-2147483648	; 0x80000000
     f98:	0a00000d 	beq	fd4 <__aeabi_fmul+0x18c>
     f9c:	e132000c 	teq	r2, ip
     fa0:	1a000001 	bne	fac <__aeabi_fmul+0x164>
     fa4:	e1b02480 	lsls	r2, r0, #9
     fa8:	1a000009 	bne	fd4 <__aeabi_fmul+0x18c>
     fac:	e133000c 	teq	r3, ip
     fb0:	1a000002 	bne	fc0 <__aeabi_fmul+0x178>
     fb4:	e1b03481 	lsls	r3, r1, #9
     fb8:	11a00001 	movne	r0, r1
     fbc:	1a000004 	bne	fd4 <__aeabi_fmul+0x18c>
     fc0:	e0200001 	eor	r0, r0, r1
     fc4:	e2000102 	and	r0, r0, #-2147483648	; 0x80000000
     fc8:	e380047f 	orr	r0, r0, #2130706432	; 0x7f000000
     fcc:	e3800502 	orr	r0, r0, #8388608	; 0x800000
     fd0:	e12fff1e 	bx	lr
     fd4:	e380047f 	orr	r0, r0, #2130706432	; 0x7f000000
     fd8:	e3800503 	orr	r0, r0, #12582912	; 0xc00000
     fdc:	e12fff1e 	bx	lr

00000fe0 <__aeabi_fdiv>:
     fe0:	e3a0c0ff 	mov	ip, #255	; 0xff
     fe4:	e01c2ba0 	ands	r2, ip, r0, lsr #23
     fe8:	101c3ba1 	andsne	r3, ip, r1, lsr #23
     fec:	1132000c 	teqne	r2, ip
     ff0:	1133000c 	teqne	r3, ip
     ff4:	0a00003a 	beq	10e4 <__aeabi_fdiv+0x104>
     ff8:	e0422003 	sub	r2, r2, r3
     ffc:	e020c001 	eor	ip, r0, r1
    1000:	e1b01481 	lsls	r1, r1, #9
    1004:	e1a00480 	lsl	r0, r0, #9
    1008:	0a00001c 	beq	1080 <__aeabi_fdiv+0xa0>
    100c:	e3a03201 	mov	r3, #268435456	; 0x10000000
    1010:	e1831221 	orr	r1, r3, r1, lsr #4
    1014:	e1833220 	orr	r3, r3, r0, lsr #4
    1018:	e20c0102 	and	r0, ip, #-2147483648	; 0x80000000
    101c:	e1530001 	cmp	r3, r1
    1020:	31a03083 	lslcc	r3, r3, #1
    1024:	e2a2207d 	adc	r2, r2, #125	; 0x7d
    1028:	e3a0c502 	mov	ip, #8388608	; 0x800000
    102c:	e1530001 	cmp	r3, r1
    1030:	20433001 	subcs	r3, r3, r1
    1034:	2180000c 	orrcs	r0, r0, ip
    1038:	e15300a1 	cmp	r3, r1, lsr #1
    103c:	204330a1 	subcs	r3, r3, r1, lsr #1
    1040:	218000ac 	orrcs	r0, r0, ip, lsr #1
    1044:	e1530121 	cmp	r3, r1, lsr #2
    1048:	20433121 	subcs	r3, r3, r1, lsr #2
    104c:	2180012c 	orrcs	r0, r0, ip, lsr #2
    1050:	e15301a1 	cmp	r3, r1, lsr #3
    1054:	204331a1 	subcs	r3, r3, r1, lsr #3
    1058:	218001ac 	orrcs	r0, r0, ip, lsr #3
    105c:	e1b03203 	lsls	r3, r3, #4
    1060:	11b0c22c 	lsrsne	ip, ip, #4
    1064:	1afffff0 	bne	102c <__aeabi_fdiv+0x4c>
    1068:	e35200fd 	cmp	r2, #253	; 0xfd
    106c:	8affff9d 	bhi	ee8 <__aeabi_fmul+0xa0>
    1070:	e1530001 	cmp	r3, r1
    1074:	e0a00b82 	adc	r0, r0, r2, lsl #23
    1078:	03c00001 	biceq	r0, r0, #1
    107c:	e12fff1e 	bx	lr
    1080:	e20cc102 	and	ip, ip, #-2147483648	; 0x80000000
    1084:	e18c04a0 	orr	r0, ip, r0, lsr #9
    1088:	e292207f 	adds	r2, r2, #127	; 0x7f
    108c:	c27230ff 	rsbsgt	r3, r2, #255	; 0xff
    1090:	c1800b82 	orrgt	r0, r0, r2, lsl #23
    1094:	c12fff1e 	bxgt	lr
    1098:	e3800502 	orr	r0, r0, #8388608	; 0x800000
    109c:	e3a03000 	mov	r3, #0
    10a0:	e2522001 	subs	r2, r2, #1
    10a4:	eaffff8f 	b	ee8 <__aeabi_fmul+0xa0>
    10a8:	e3320000 	teq	r2, #0
    10ac:	e200c102 	and	ip, r0, #-2147483648	; 0x80000000
    10b0:	01a00080 	lsleq	r0, r0, #1
    10b4:	03100502 	tsteq	r0, #8388608	; 0x800000
    10b8:	02422001 	subeq	r2, r2, #1
    10bc:	0afffffb 	beq	10b0 <__aeabi_fdiv+0xd0>
    10c0:	e180000c 	orr	r0, r0, ip
    10c4:	e3330000 	teq	r3, #0
    10c8:	e201c102 	and	ip, r1, #-2147483648	; 0x80000000
    10cc:	01a01081 	lsleq	r1, r1, #1
    10d0:	03110502 	tsteq	r1, #8388608	; 0x800000
    10d4:	02433001 	subeq	r3, r3, #1
    10d8:	0afffffb 	beq	10cc <__aeabi_fdiv+0xec>
    10dc:	e181100c 	orr	r1, r1, ip
    10e0:	eaffffc4 	b	ff8 <__aeabi_fdiv+0x18>
    10e4:	e00c3ba1 	and	r3, ip, r1, lsr #23
    10e8:	e132000c 	teq	r2, ip
    10ec:	1a000005 	bne	1108 <__aeabi_fdiv+0x128>
    10f0:	e1b02480 	lsls	r2, r0, #9
    10f4:	1affffb6 	bne	fd4 <__aeabi_fmul+0x18c>
    10f8:	e133000c 	teq	r3, ip
    10fc:	1affffaf 	bne	fc0 <__aeabi_fmul+0x178>
    1100:	e1a00001 	mov	r0, r1
    1104:	eaffffb2 	b	fd4 <__aeabi_fmul+0x18c>
    1108:	e133000c 	teq	r3, ip
    110c:	1a000003 	bne	1120 <__aeabi_fdiv+0x140>
    1110:	e1b03481 	lsls	r3, r1, #9
    1114:	0affff97 	beq	f78 <__aeabi_fmul+0x130>
    1118:	e1a00001 	mov	r0, r1
    111c:	eaffffac 	b	fd4 <__aeabi_fmul+0x18c>
    1120:	e3d0c102 	bics	ip, r0, #-2147483648	; 0x80000000
    1124:	13d1c102 	bicsne	ip, r1, #-2147483648	; 0x80000000
    1128:	1affffde 	bne	10a8 <__aeabi_fdiv+0xc8>
    112c:	e3d02102 	bics	r2, r0, #-2147483648	; 0x80000000
    1130:	1affffa2 	bne	fc0 <__aeabi_fmul+0x178>
    1134:	e3d13102 	bics	r3, r1, #-2147483648	; 0x80000000
    1138:	1affff8e 	bne	f78 <__aeabi_fmul+0x130>
    113c:	eaffffa4 	b	fd4 <__aeabi_fmul+0x18c>

00001140 <__aeabi_f2iz>:
    1140:	e1a02080 	lsl	r2, r0, #1
    1144:	e352047f 	cmp	r2, #2130706432	; 0x7f000000
    1148:	3a000008 	bcc	1170 <__aeabi_f2iz+0x30>
    114c:	e3a0309e 	mov	r3, #158	; 0x9e
    1150:	e0532c22 	subs	r2, r3, r2, lsr #24
    1154:	9a000007 	bls	1178 <__aeabi_f2iz+0x38>
    1158:	e1a03400 	lsl	r3, r0, #8
    115c:	e3833102 	orr	r3, r3, #-2147483648	; 0x80000000
    1160:	e3100102 	tst	r0, #-2147483648	; 0x80000000
    1164:	e1a00233 	lsr	r0, r3, r2
    1168:	12600000 	rsbne	r0, r0, #0
    116c:	e12fff1e 	bx	lr
    1170:	e3a00000 	mov	r0, #0
    1174:	e12fff1e 	bx	lr
    1178:	e3720061 	cmn	r2, #97	; 0x61
    117c:	1a000001 	bne	1188 <__aeabi_f2iz+0x48>
    1180:	e1b02480 	lsls	r2, r0, #9
    1184:	1a000002 	bne	1194 <__aeabi_f2iz+0x54>
    1188:	e2100102 	ands	r0, r0, #-2147483648	; 0x80000000
    118c:	03e00102 	mvneq	r0, #-2147483648	; 0x80000000
    1190:	e12fff1e 	bx	lr
    1194:	e3a00000 	mov	r0, #0
    1198:	e12fff1e 	bx	lr

0000119c <atexit>:
    119c:	e1a01000 	mov	r1, r0
    11a0:	e3a00000 	mov	r0, #0
    11a4:	e92d4008 	push	{r3, lr}
    11a8:	e1a02000 	mov	r2, r0
    11ac:	e1a03000 	mov	r3, r0
    11b0:	eb00000e 	bl	11f0 <__register_exitproc>
    11b4:	e8bd4008 	pop	{r3, lr}
    11b8:	e12fff1e 	bx	lr

000011bc <exit>:
    11bc:	e92d4008 	push	{r3, lr}
    11c0:	e3a01000 	mov	r1, #0
    11c4:	e1a04000 	mov	r4, r0
    11c8:	eb000045 	bl	12e4 <__call_exitprocs>
    11cc:	e59f3018 	ldr	r3, [pc, #24]	; 11ec <exit+0x30>
    11d0:	e5930000 	ldr	r0, [r3]
    11d4:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
    11d8:	e3530000 	cmp	r3, #0
    11dc:	11a0e00f 	movne	lr, pc
    11e0:	112fff13 	bxne	r3
    11e4:	e1a00004 	mov	r0, r4
    11e8:	eb0000c9 	bl	1514 <_exit>
    11ec:	00001620 	.word	0x00001620

000011f0 <__register_exitproc>:
    11f0:	e59fc0e4 	ldr	ip, [pc, #228]	; 12dc <__register_exitproc+0xec>
    11f4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    11f8:	e59c4000 	ldr	r4, [ip]
    11fc:	e594c148 	ldr	ip, [r4, #328]	; 0x148
    1200:	e35c0000 	cmp	ip, #0
    1204:	0284cf53 	addeq	ip, r4, #332	; 0x14c
    1208:	e59c5004 	ldr	r5, [ip, #4]
    120c:	0584c148 	streq	ip, [r4, #328]	; 0x148
    1210:	e355001f 	cmp	r5, #31
    1214:	e24dd010 	sub	sp, sp, #16
    1218:	e1a06000 	mov	r6, r0
    121c:	da000015 	ble	1278 <__register_exitproc+0x88>
    1220:	e59f00b8 	ldr	r0, [pc, #184]	; 12e0 <__register_exitproc+0xf0>
    1224:	e3500000 	cmp	r0, #0
    1228:	1a000001 	bne	1234 <__register_exitproc+0x44>
    122c:	e3e00000 	mvn	r0, #0
    1230:	ea000018 	b	1298 <__register_exitproc+0xa8>
    1234:	e3a00e19 	mov	r0, #400	; 0x190
    1238:	e58d100c 	str	r1, [sp, #12]
    123c:	e58d2008 	str	r2, [sp, #8]
    1240:	e58d3004 	str	r3, [sp, #4]
    1244:	e320f000 	nop	{0}
    1248:	e250c000 	subs	ip, r0, #0
    124c:	e59d100c 	ldr	r1, [sp, #12]
    1250:	e59d2008 	ldr	r2, [sp, #8]
    1254:	e59d3004 	ldr	r3, [sp, #4]
    1258:	0afffff3 	beq	122c <__register_exitproc+0x3c>
    125c:	e5945148 	ldr	r5, [r4, #328]	; 0x148
    1260:	e3a00000 	mov	r0, #0
    1264:	e58c0004 	str	r0, [ip, #4]
    1268:	e58c5000 	str	r5, [ip]
    126c:	e584c148 	str	ip, [r4, #328]	; 0x148
    1270:	e58c0188 	str	r0, [ip, #392]	; 0x188
    1274:	e58c018c 	str	r0, [ip, #396]	; 0x18c
    1278:	e3560000 	cmp	r6, #0
    127c:	e59c4004 	ldr	r4, [ip, #4]
    1280:	1a000007 	bne	12a4 <__register_exitproc+0xb4>
    1284:	e2843002 	add	r3, r4, #2
    1288:	e2844001 	add	r4, r4, #1
    128c:	e78c1103 	str	r1, [ip, r3, lsl #2]
    1290:	e58c4004 	str	r4, [ip, #4]
    1294:	e3a00000 	mov	r0, #0
    1298:	e28dd010 	add	sp, sp, #16
    129c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    12a0:	e12fff1e 	bx	lr
    12a4:	e3a00001 	mov	r0, #1
    12a8:	e1a00410 	lsl	r0, r0, r4
    12ac:	e08c8104 	add	r8, ip, r4, lsl #2
    12b0:	e3560002 	cmp	r6, #2
    12b4:	e59c7188 	ldr	r7, [ip, #392]	; 0x188
    12b8:	e5883108 	str	r3, [r8, #264]	; 0x108
    12bc:	059c318c 	ldreq	r3, [ip, #396]	; 0x18c
    12c0:	e1877000 	orr	r7, r7, r0
    12c4:	01830000 	orreq	r0, r3, r0
    12c8:	e1a05008 	mov	r5, r8
    12cc:	e5882088 	str	r2, [r8, #136]	; 0x88
    12d0:	e58c7188 	str	r7, [ip, #392]	; 0x188
    12d4:	058c018c 	streq	r0, [ip, #396]	; 0x18c
    12d8:	eaffffe9 	b	1284 <__register_exitproc+0x94>
    12dc:	00001620 	.word	0x00001620
    12e0:	00000000 	.word	0x00000000

000012e4 <__call_exitprocs>:
    12e4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    12e8:	e59f3168 	ldr	r3, [pc, #360]	; 1458 <__call_exitprocs+0x174>
    12ec:	e5933000 	ldr	r3, [r3]
    12f0:	e24dd014 	sub	sp, sp, #20
    12f4:	e58d3004 	str	r3, [sp, #4]
    12f8:	e2833f52 	add	r3, r3, #328	; 0x148
    12fc:	e58d0008 	str	r0, [sp, #8]
    1300:	e58d300c 	str	r3, [sp, #12]
    1304:	e1a07001 	mov	r7, r1
    1308:	e3a08001 	mov	r8, #1
    130c:	e59d3004 	ldr	r3, [sp, #4]
    1310:	e5936148 	ldr	r6, [r3, #328]	; 0x148
    1314:	e3560000 	cmp	r6, #0
    1318:	e59db00c 	ldr	fp, [sp, #12]
    131c:	0a000033 	beq	13f0 <__call_exitprocs+0x10c>
    1320:	e5965004 	ldr	r5, [r6, #4]
    1324:	e2554001 	subs	r4, r5, #1
    1328:	5286a088 	addpl	sl, r6, #136	; 0x88
    132c:	5285501f 	addpl	r5, r5, #31
    1330:	508a5105 	addpl	r5, sl, r5, lsl #2
    1334:	5a000007 	bpl	1358 <__call_exitprocs+0x74>
    1338:	ea000029 	b	13e4 <__call_exitprocs+0x100>
    133c:	e5953000 	ldr	r3, [r5]
    1340:	e1530007 	cmp	r3, r7
    1344:	0a000005 	beq	1360 <__call_exitprocs+0x7c>
    1348:	e2444001 	sub	r4, r4, #1
    134c:	e3740001 	cmn	r4, #1
    1350:	e2455004 	sub	r5, r5, #4
    1354:	0a000022 	beq	13e4 <__call_exitprocs+0x100>
    1358:	e3570000 	cmp	r7, #0
    135c:	1afffff6 	bne	133c <__call_exitprocs+0x58>
    1360:	e5963004 	ldr	r3, [r6, #4]
    1364:	e06a2005 	rsb	r2, sl, r5
    1368:	e2433001 	sub	r3, r3, #1
    136c:	e0862002 	add	r2, r6, r2
    1370:	e1530004 	cmp	r3, r4
    1374:	e5123078 	ldr	r3, [r2, #-120]	; 0xffffff88
    1378:	13a01000 	movne	r1, #0
    137c:	05864004 	streq	r4, [r6, #4]
    1380:	15021078 	strne	r1, [r2, #-120]	; 0xffffff88
    1384:	e3530000 	cmp	r3, #0
    1388:	0affffee 	beq	1348 <__call_exitprocs+0x64>
    138c:	e1a02418 	lsl	r2, r8, r4
    1390:	e5961188 	ldr	r1, [r6, #392]	; 0x188
    1394:	e1120001 	tst	r2, r1
    1398:	e5969004 	ldr	r9, [r6, #4]
    139c:	0a000016 	beq	13fc <__call_exitprocs+0x118>
    13a0:	e596118c 	ldr	r1, [r6, #396]	; 0x18c
    13a4:	e1120001 	tst	r2, r1
    13a8:	1a000016 	bne	1408 <__call_exitprocs+0x124>
    13ac:	e59d0008 	ldr	r0, [sp, #8]
    13b0:	e5151080 	ldr	r1, [r5, #-128]	; 0xffffff80
    13b4:	e1a0e00f 	mov	lr, pc
    13b8:	e12fff13 	bx	r3
    13bc:	e5963004 	ldr	r3, [r6, #4]
    13c0:	e1530009 	cmp	r3, r9
    13c4:	1affffd0 	bne	130c <__call_exitprocs+0x28>
    13c8:	e59b3000 	ldr	r3, [fp]
    13cc:	e1530006 	cmp	r3, r6
    13d0:	1affffcd 	bne	130c <__call_exitprocs+0x28>
    13d4:	e2444001 	sub	r4, r4, #1
    13d8:	e3740001 	cmn	r4, #1
    13dc:	e2455004 	sub	r5, r5, #4
    13e0:	1affffdc 	bne	1358 <__call_exitprocs+0x74>
    13e4:	e59f1070 	ldr	r1, [pc, #112]	; 145c <__call_exitprocs+0x178>
    13e8:	e3510000 	cmp	r1, #0
    13ec:	1a000009 	bne	1418 <__call_exitprocs+0x134>
    13f0:	e28dd014 	add	sp, sp, #20
    13f4:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    13f8:	e12fff1e 	bx	lr
    13fc:	e1a0e00f 	mov	lr, pc
    1400:	e12fff13 	bx	r3
    1404:	eaffffec 	b	13bc <__call_exitprocs+0xd8>
    1408:	e5150080 	ldr	r0, [r5, #-128]	; 0xffffff80
    140c:	e1a0e00f 	mov	lr, pc
    1410:	e12fff13 	bx	r3
    1414:	eaffffe8 	b	13bc <__call_exitprocs+0xd8>
    1418:	e5963004 	ldr	r3, [r6, #4]
    141c:	e3530000 	cmp	r3, #0
    1420:	e5963000 	ldr	r3, [r6]
    1424:	1a000008 	bne	144c <__call_exitprocs+0x168>
    1428:	e3530000 	cmp	r3, #0
    142c:	0a000006 	beq	144c <__call_exitprocs+0x168>
    1430:	e1a00006 	mov	r0, r6
    1434:	e58b3000 	str	r3, [fp]
    1438:	e320f000 	nop	{0}
    143c:	e59b6000 	ldr	r6, [fp]
    1440:	e3560000 	cmp	r6, #0
    1444:	1affffb5 	bne	1320 <__call_exitprocs+0x3c>
    1448:	eaffffe8 	b	13f0 <__call_exitprocs+0x10c>
    144c:	e1a0b006 	mov	fp, r6
    1450:	e1a06003 	mov	r6, r3
    1454:	eafffff9 	b	1440 <__call_exitprocs+0x15c>
    1458:	00001620 	.word	0x00001620
    145c:	00000000 	.word	0x00000000

00001460 <register_fini>:
    1460:	e92d4008 	push	{r3, lr}
    1464:	e59f3010 	ldr	r3, [pc, #16]	; 147c <register_fini+0x1c>
    1468:	e3530000 	cmp	r3, #0
    146c:	159f000c 	ldrne	r0, [pc, #12]	; 1480 <register_fini+0x20>
    1470:	1bffff49 	blne	119c <atexit>
    1474:	e8bd4008 	pop	{r3, lr}
    1478:	e12fff1e 	bx	lr
    147c:	00001648 	.word	0x00001648
    1480:	00001484 	.word	0x00001484

00001484 <__libc_fini_array>:
    1484:	e92d4038 	push	{r3, r4, r5, lr}
    1488:	e59f5030 	ldr	r5, [pc, #48]	; 14c0 <__libc_fini_array+0x3c>
    148c:	e59f4030 	ldr	r4, [pc, #48]	; 14c4 <__libc_fini_array+0x40>
    1490:	e0654004 	rsb	r4, r5, r4
    1494:	e1b04144 	asrs	r4, r4, #2
    1498:	10855104 	addne	r5, r5, r4, lsl #2
    149c:	0a000004 	beq	14b4 <__libc_fini_array+0x30>
    14a0:	e5353004 	ldr	r3, [r5, #-4]!
    14a4:	e1a0e00f 	mov	lr, pc
    14a8:	e12fff13 	bx	r3
    14ac:	e2544001 	subs	r4, r4, #1
    14b0:	1afffffa 	bne	14a0 <__libc_fini_array+0x1c>
    14b4:	eb000063 	bl	1648 <__libc_fini>
    14b8:	e8bd4038 	pop	{r3, r4, r5, lr}
    14bc:	e12fff1e 	bx	lr
    14c0:	00001660 	.word	0x00001660
    14c4:	00001664 	.word	0x00001664

000014c8 <__cs3_premain>:
    14c8:	e92d4008 	push	{r3, lr}
    14cc:	eb000017 	bl	1530 <__libc_init_array>
    14d0:	e59f3030 	ldr	r3, [pc, #48]	; 1508 <__cs3_premain+0x40>
    14d4:	e3530000 	cmp	r3, #0
    14d8:	15930000 	ldrne	r0, [r3]
    14dc:	01a00003 	moveq	r0, r3
    14e0:	e59f3024 	ldr	r3, [pc, #36]	; 150c <__cs3_premain+0x44>
    14e4:	e3530000 	cmp	r3, #0
    14e8:	15931000 	ldrne	r1, [r3]
    14ec:	01a01003 	moveq	r1, r3
    14f0:	e3a02000 	mov	r2, #0
    14f4:	ebfffd81 	bl	b00 <main>
    14f8:	e59f3010 	ldr	r3, [pc, #16]	; 1510 <__cs3_premain+0x48>
    14fc:	e3530000 	cmp	r3, #0
    1500:	1bffff2d 	blne	11bc <exit>
    1504:	eafffffe 	b	1504 <__cs3_premain+0x3c>
	...
    1510:	000011bc 	.word	0x000011bc

00001514 <_exit>:
    1514:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    1518:	e3a00018 	mov	r0, #24
    151c:	e59f1004 	ldr	r1, [pc, #4]	; 1528 <_exit+0x14>
    1520:	ef123456 	svc	0x00123456
    1524:	eafffffe 	b	1524 <_exit+0x10>
    1528:	00020026 	.word	0x00020026

0000152c <__cs3_isr_interrupt>:
    152c:	eafffffe 	b	152c <__cs3_isr_interrupt>

00001530 <__libc_init_array>:
    1530:	e92d4070 	push	{r4, r5, r6, lr}
    1534:	e59f506c 	ldr	r5, [pc, #108]	; 15a8 <__libc_init_array+0x78>
    1538:	e59f606c 	ldr	r6, [pc, #108]	; 15ac <__libc_init_array+0x7c>
    153c:	e0656006 	rsb	r6, r5, r6
    1540:	e1b06146 	asrs	r6, r6, #2
    1544:	12455004 	subne	r5, r5, #4
    1548:	13a04000 	movne	r4, #0
    154c:	0a000005 	beq	1568 <__libc_init_array+0x38>
    1550:	e5b53004 	ldr	r3, [r5, #4]!
    1554:	e2844001 	add	r4, r4, #1
    1558:	e1a0e00f 	mov	lr, pc
    155c:	e12fff13 	bx	r3
    1560:	e1560004 	cmp	r6, r4
    1564:	1afffff9 	bne	1550 <__libc_init_array+0x20>
    1568:	e59f5040 	ldr	r5, [pc, #64]	; 15b0 <__libc_init_array+0x80>
    156c:	e59f6040 	ldr	r6, [pc, #64]	; 15b4 <__libc_init_array+0x84>
    1570:	e0656006 	rsb	r6, r5, r6
    1574:	eb00002b 	bl	1628 <_init>
    1578:	e1b06146 	asrs	r6, r6, #2
    157c:	12455004 	subne	r5, r5, #4
    1580:	13a04000 	movne	r4, #0
    1584:	0a000005 	beq	15a0 <__libc_init_array+0x70>
    1588:	e5b53004 	ldr	r3, [r5, #4]!
    158c:	e2844001 	add	r4, r4, #1
    1590:	e1a0e00f 	mov	lr, pc
    1594:	e12fff13 	bx	r3
    1598:	e1560004 	cmp	r6, r4
    159c:	1afffff9 	bne	1588 <__libc_init_array+0x58>
    15a0:	e8bd4070 	pop	{r4, r5, r6, lr}
    15a4:	e12fff1e 	bx	lr
    15a8:	00001640 	.word	0x00001640
    15ac:	00001640 	.word	0x00001640
    15b0:	00001640 	.word	0x00001640
    15b4:	00001648 	.word	0x00001648

Disassembly of section .rodata:

000015bc <BLACK>:
	...

000015c8 <PURPLE>:
    15c8:	0000001f 00000000 0000001f              ............

000015d4 <TURQUOISE>:
    15d4:	00000000 0000003f 0000001f              ....?.......

000015e0 <ORANGE>:
    15e0:	0000001f 00000020 00000000              .... .......

000015ec <WHITE>:
    15ec:	0000001f 0000003f 0000001f              ....?.......

000015f8 <YELLOW>:
    15f8:	0000001f 0000003f 00000000              ....?.......

00001604 <GREEN>:
    1604:	00000000 0000003f 00000000              ....?.......

00001610 <RED>:
    1610:	0000001f 00000000 00000000              ............

0000161c <jtag>:
    161c:	ff211020                                 .!.

00001620 <_global_impure_ptr>:
    1620:	00001688 00000043                       ....C...

00001628 <_init>:
    1628:	e1a0c00d 	mov	ip, sp
    162c:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr, pc}
    1630:	e24cb004 	sub	fp, ip, #4
    1634:	e24bd028 	sub	sp, fp, #40	; 0x28
    1638:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, sl, fp, sp, lr}
    163c:	e12fff1e 	bx	lr

00001640 <__init_array_start>:
    1640:	00001460 	.word	0x00001460

00001644 <__frame_dummy_init_array_entry>:
    1644:	00000208                                ....

00001648 <__libc_fini>:
    1648:	e1a0c00d 	mov	ip, sp
    164c:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr, pc}
    1650:	e24cb004 	sub	fp, ip, #4
    1654:	e24bd028 	sub	sp, fp, #40	; 0x28
    1658:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, sl, fp, sp, lr}
    165c:	e12fff1e 	bx	lr

00001660 <__fini_array_start>:
    1660:	000001c4 	.word	0x000001c4

00001664 <__cs3_regions>:
	...
    1670:	00001ab8 	.word	0x00001ab8
    1674:	00000330 	.word	0x00000330
